<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>http_post_string</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for http_post_string" />
  <meta name="rh-index-keywords" content="http_post_string" />
  <meta name="search-keywords" content="http_post_string" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>http_post_string</h1>
  <p>Na computação, uma solicitação <b>postal</b> é utilizada quando o cliente precisa enviar dados para o servidor como parte da solicitação de recuperação, como ao carregar um arquivo ou enviar um formulário preenchido, e o mesmo se aplica a esta função no <span class="notranslate">GameMaker Studio 2</span>.
    Ao contrário do método de solicitação <span class="inline"><a href="http_get.htm">http_get()</a></span> onde apenas uma URL é enviada para o servidor, <tt>http_post_string()</tt> também inclui uma string que é enviada para o servidor e pode resultar na criação
    de um novo recurso ou a atualização de um recurso existente ou ambos. Deve-se observar que os parâmetros de solicitação HTTP (os bits às vezes &quot;colados&quot; ao final de uma URL quando você envia um formulário em uma página da Web) são perfeitamente aceitáveis quando se usa
    esta função também.</p>
  <p class="note"><b>NOTA: </b>Você deve estar ciente de que, devido à proteção XSS nos navegadores, as solicitações e tentativas de carregamento de recursos através de domínios são bloqueadas e podem parecer retornar resultados em branco. Consulte a parte sobre <a href="HTTP.htm">Questões de Domínios Cruzados</a> para maiores detalhes.</p>
  <p>Este evento gerará uma &quot;call back&quot; que é captada por qualquer <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">evento</a> HTTP <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/HTTP.htm">, neste</a> caso gerará um DS Map ( <a href="../../Data_Structures/DS_Maps/DS_Maps.htm">mais</a> comumente conhecido como &quot;dicionário&quot;) que é exclusivo para este evento e é armazenado na variável especial <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><b>async_load</b></a>. Este mapa DS conterá
    valores diferentes, dependendo se há ou não dados sendo devolvidos. Por exemplo, se você tiver solicitado um arquivo, o evento será acionado várias vezes conforme cada pacote de dados é recebido para que você possa mostrar uma barra de progresso, por exemplo. A barra de progresso geral
    para o mapa DS será a seguinte:</p>
  <ul class="colour">
    <li><b>id: </b>O ID que foi devolvido do comando. Se você disparar uma série de solicitações <tt>http_</tt> então você precisa saber a qual você está recebendo a resposta, e assim você usaria este valor para comparar com o valor que você armazenou quando você originalmente
      enviou o pedido para encontrar a pessoa certa.</li>
    <li><b>status: </b>Retorna um valor inferior a 0 para um erro, 0 para completo e 1 para receber pacotes (veja abaixo para mais detalhes).</li>
    <li><b>resultado: </b>Os dados recebidos (apenas fio).</li>
    <li><b>url: </b>A URL completa que você solicitou.</li>
    <li><b>http_status: </b>O código de status http em bruto (se disponível). Isto retorna o código de status padrão da web para a maioria dos navegadores, por exemplo: 304 para &quot;Não modificado&quot; ou 204 para &quot;Sem conteúdo&quot;, etc...</li>
  </ul>
  <p>Se houver vários pacotes sendo devolvidos ao seu jogo, a chave &quot;status&quot; de retorno retornará 1, neste caso o mapa DS terá as seguintes chaves adicionais:</p>
  <ul class="colour">
    <li><b>&quot;ContentLength&quot;: </b>Este é o tamanho do arquivo que o servidor web disse que você deve esperar receber (pode ser -1 se o servidor não devolver estes dados).</li>
    <li><b>&quot;sizeDownloaded&quot;: </b>O tamanho dos dados que já foram baixados.</li>
  </ul>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">http_post_string(url, string);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td>url</td>
        <td>O endereço web do servidor do qual você deseja obter informações</td>
      </tr>
      <tr>
        <td>corda</td>
        <td>A cadeia que você deseja enviar para o URL especificado</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Exemplo ampliado:</h4>
  <p>A função <tt>http_post_string()</tt> pode ser chamada a partir de qualquer evento, e como é assíncrona, a ligação de retorno pode ser quase instantânea ou pode levar vários segundos. Chamar a função é simples e pareceria algo parecido com isto:</p>
  <p class="code">var str = &quot;nome=&quot; + nome_de_jogador.global + &quot;&amp;score=&quot; + string(global.player_score);<br> post = http_post_string(&quot;http://www.angusgames.com/game?game_id=&quot; + string(global.game_id), str);</p>
  <p>O código acima envia um pedido de recuperação para a URL especificada com os parâmetros fornecidos, bem como o envio dos dados adicionais (nome do jogador e pontuação na forma codificada pela URL) armazenados na variável str. Isto acionará todos os <b>eventos</b> assíncronos <b>Http</b> definidos se uma chamada de retorno for recebida, e você pode verificar o &quot;id&quot; retornado em relação àquele armazenado no post da variável para <tt>ter</tt> certeza de que você executou o código correto caso tivesse usado várias <tt>funções</tt> http_post_string <tt>()</tt>. As seguintes funções
    O código de exemplo mostra como isto seria feito:</p>
  <p class="code">var r_str = &quot;null&quot;;<br> if ds_map_find_value(async_load, &quot;id&quot;) == post<br> {
    <br> if ds_map_find_value(async_load, &quot;status&quot;) == 0<br> {
    <br> r_str = ds_map_find_value(async_load, &quot;resultado&quot;);<br> }
    <br> }
  </p>
  <p>O código acima verificará primeiro a identificação do mapa DS que foi criado, depois verificará o status da ligação de retorno. Se o valor for igual a 0 (sinalização de sucesso), o resultado da chamada de retorno será então armazenado em uma variável para uso futuro, caso contrário
    a variável terá simplesmente um valor padrão (neste caso, &quot;nulo&quot;).</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="HTTP.htm">HTTP</a></div>
        <div style="float:right">Próximo: <a href="http_get_request_crossorigin.htm">http_get_request_crossorigin</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
http_post_string
-->
  <!-- TAGS
http_post_string
-->
</body>
</html>