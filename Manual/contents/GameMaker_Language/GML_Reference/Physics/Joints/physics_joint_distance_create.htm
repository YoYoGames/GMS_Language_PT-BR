<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>fisica_distância_distância_criar</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_distance_create" />
  <meta name="rh-index-keywords" content="physics_joint_distance_create" />
  <meta name="search-keywords" content="physics_joint_distance_create" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>fisica_distância_distância_criar</h1>
  <p>Uma das juntas mais simples é uma junta à distância que diz que a distância entre dois pontos em duas instâncias deve ser constante. Quando você especifica uma junta de distância, as duas instâncias já devem ser criadas e ter uma fixação atribuída, então você define
    os dois pontos de ancoragem nas coordenadas da sala. O primeiro ponto de ancoragem é conectado à instância 1, o segundo ponto de ancoragem é conectado à instância 2 e a distância entre estes pontos implica o comprimento da restrição de distância. A imagem abaixo mostra
    como isto funciona:</p>
  <p><img alt="Distance joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/direction_joint_image.png">Como você pode ver, os pontos de ancoragem são especificados como coordenadas da sala, portanto é preciso ter cuidado quando
    definindo-as, especialmente se as instâncias estão sendo criadas ao mesmo tempo que as juntas, em vez de serem colocadas na sala através do editor da sala. Você também deve perceber que as articulações são criadas independentemente do tamanho do duende de
    as instâncias ou os acessórios que eles anexaram. Portanto, se você criar uma junta à distância em outro lugar que não seja a origem da instância, ela ainda é válida e restringirá as duas instâncias em relação à posição em que foi criada. Se você definir
    o valor &quot;col&quot; para verdadeiro, então <tt>as</tt> duas instâncias podem interagir e colidir uma com a outra, mas somente se tiverem eventos de colisão, no entanto, se for definido como falso, <tt>elas</tt> não colidirão, não importa o que aconteça.</p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col)</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td>inst1</td>
        <td>A primeira instância para se conectar com a junta</td>
      </tr>
      <tr>
        <td>inst2</td>
        <td>A segunda instância para se conectar com a junta</td>
      </tr>
      <tr>
        <td>w_anchor1_x</td>
        <td>A primeira coordenada x para a articulação, dentro do mundo do jogo</td>
      </tr>
      <tr>
        <td>w_anchor1_y</td>
        <td>A primeira coordenada y para a articulação, dentro do mundo do jogo</td>
      </tr>
      <tr>
        <td>w_anchor2_x</td>
        <td>A segunda coordenada x para a articulação, dentro do mundo do jogo</td>
      </tr>
      <tr>
        <td>w_anchor2_y</td>
        <td>a segunda coordenada y para a articulação, dentro do mundo do jogo</td>
      </tr>
      <tr>
        <td>col</td>
        <td>Se as duas instâncias podem colidir (verdadeiras) ou não (falsas)</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code">Inteiro (índice da junta)</p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">var mainFixture, o_id;<br> mainFixture = physics_fixture_create();<br> physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br> o_id=instance_create_layer(x+300, y, &quot;Instances&quot;, obj_Rudder);<br> physics_fixture_bind(mainFixture_bind(mainFixture),
    id);<br> physics_fixture_bind(mainFixture, o_id);<br> physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0);<br> physics_fixture_delete(mainFixture);
  </p>
  <p>O código acima cria e define uma nova fixação e depois cria uma instância de &quot;obj_Rudder&quot;. A fixação é então atribuída à instância que está executando o código, bem como a recém-criada, e é criada uma articulação entre elas. Finalmente
    a fixação é eliminada, pois não é mais necessária.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="Joints.htm">Juntas</a></div>
        <div style="float:right">A seguir: <a href="physics_joint_revolute_create.htm">physics_joint_revolute_create</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_distance_create
-->
  <!-- TAGS
physics_joint_distance_create
-->
</body>
</html>