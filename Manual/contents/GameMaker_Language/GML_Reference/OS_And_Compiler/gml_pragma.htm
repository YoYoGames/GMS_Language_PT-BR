<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gml_pragma</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for gml_pragma" />
  <meta name="rh-index-keywords" content="gml_pragma" />
  <meta name="search-keywords" content="gml_pragma" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gml_pragma</h1>
  <p>A função <tt>gml_pragma</tt> afeta como o alvo dado compila seu código e deve ser chamado com os diferentes comandos para otimizar ainda mais a compilação final de seu projeto. Estes comandos são efetivamente <i>pré-processados</i> antes do
    O jogo é compilado e assim a função pode ser colocada em qualquer lugar em seu projeto e ainda será processada antes que o jogo seja totalmente compilado. Os comandos disponíveis são os seguintes:</p>
  <ul class="colour">
    <li>&quot;forceinline<b>&quot; -</b> Quando a função é chamada com o pragma &quot;forceinline&quot; em uma função de script, o <b>YYC compilará</b> o projeto com a função inline, em vez de referenciada. Isto dará um processamento adicional
      boost, mas deve-se ter cuidado ao utilizá-lo, pois ele também inflará o tamanho final do arquivo executável, especialmente se o código in-lined for grande e/ou utilizado em vários lugares diferentes, além de aumentar muito o tempo de compilação. Note que este pragma
     <b>só</b> é <b>válido quando se constrói usando o YYC</b>.</li>
    <li>&quot;<b>global&quot;, &quot;</b>[código gml]&quot; -<b> O</b> pragma<b>&quot;global</b>&quot; permite chamar algum código GML formatado como uma string <span class="notranslate">,</span> em um escopo global, em tempo de compilação, antes que a primeira sala do jogo seja executada. Por exemplo:<br>
     <p class="code">gml_pragma(&quot;global&quot;, &quot;Init()&quot;);</p>
      Isto chamará a função de script &quot;Init&quot; antes que a primeira sala do jogo seja executada. Note que o <span class="notranslate">GML</span> fornecido como segundo argumento <b>deve ser uma constante de tempo de compilação</b>, e também note que você não pode usar este pragma para criar instâncias
      ou realizar quaisquer operações que requeiram uma sala (ou qualquer coisa em uma sala) para funcionar.</li>
    <li>&quot;PNGCrush<b>&quot; -</b> O pragma &quot;PNGCrush&quot; utilizará o programa PNGCrush em <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">cada</a> textura criada. Note que isto pode acrescentar significativamente ao tempo que leva
      para compilar o jogo, de modo que você não o quer sempre ligado, embora possa fazer economias significativas no tamanho do arquivo final.</li>
    <li>&quot;Texgroup<b>.Scale&quot;, &quot;</b>[TextureGroupName<b>]&quot;, &quot; [Scale Divisor</b>]&quot; - A &quot;<b>Texgroup.Scale&quot;</b> escalará o grupo de textura em compilação. Você precisa dar dois argumentos adicionais aqui: o &quot;[TexGroupName]&quot;,
      que é o nome (uma corda) do grupo de textura à escala, e a &quot;[Escala Divisor]&quot; (também uma corda), que é o divisor que você deseja usar para a escala, ou seja<br>
     <p class="code">gml_pragma(&quot;Texgroup.Scale&quot;, &quot;level1&quot;, &quot;2&quot;);</p>
      Isto irá metade de todas as texturas do grupo de textura &quot;nível1&quot;.</li>
    <li>&quot;UnityBuild<b>&quot;, &quot;</b>[habilitar/desabilitar<b>]&quot; - Se você chamar</b> a função com este pragma e definir o argumento habilitar/desabilitar como verdadeiro, então ao compilá-lo, <tt>ele</tt> irá colapsar todos os arquivos .cpp do projeto em um único arquivo
      que depois utiliza para construir tudo, por exemplo:<br>
     <p class="code">gml_pragma(&quot;UnityBuild&quot;, &quot;verdadeiro&quot;);</p>
      O benefício de fazer uma construção de unidade é que as construções são mais rápidas, mas o lado negativo é que ela faz uma construção <i>completa</i> cada vez, portanto, mesmo que você mude uma única parte do código, ela irá construir tudo novamente sem usar nenhum arquivo em cache. Isto tem
      foi adicionado especificamente para a exportação do Xbox One utilizando o YYC, embora possa ser chamado para outras construções<b>(apenas YYC</b>). Para mais informações sobre construções de unidade, por favor, veja <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">aqui</a>.</li>
  </ul>
  <p class="note"><b>NOTA</b>: O primeiro argumento para a função <tt>gml_pragma</tt> <b>deve ser uma constante de tempo de compilação</b> e não uma variável.</p>
  <p> </p>
  <h4>Sintaxe:</h4>
  <p class="code">gml_pragma(comando, [opcional...]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td>comando</td>
        <td>Um fio com um dos comandos listados abaixo.</td>
      </tr>
      <tr>
        <td>[opcional]</td>
        <td>Alguns dos comandos disponíveis requerem um argumento ou argumentos opcionais. Estes são explicados abaixo para cada comando.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code">N/A</p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">gml_pragma(&quot;forceinline&quot;);</p>
  <p>O código do exemplo acima forçará a função do script onde ele é usado para ser compilado.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="OS_And_Compiler.htm">OS E Compilador</a></div>
        <div style="float:right">Próximo: <a href="parameter_count.htm">parâmetro_contagem</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
gml_pragma
-->
  <!-- TAGS
gml_pragma
-->
</body>
</html>