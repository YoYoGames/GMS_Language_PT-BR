<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Shaders" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span class="notranslate">Shaders</span></h1>
  <p><span class="notranslate">Os shaders</span> são uma ferramenta incrivelmente poderosa para manipular o que e como as coisas são <a class="glossterm" data-glossterm="traduzido em" href="#">renderizadas</a> à tela pela placa gráfica. Uma vez que estes minúsculos programas são realmente executados na placa de vídeo
    Isto significa que eles são extremamente rápidos de processar, liberando valiosos ciclos de CPU para mais lógica de jogo.</p>
  <p>Para criar um <span class="notranslate">Shader</span> você precisará ter escrito tanto um <b> <span class="notranslate">Shader</span></b> Vertex como um <b> <span class="notranslate">Shader</span>Fragment <span class="notranslate">Shader</span></b> (também conhecido como <b>Pixel <span class="notranslate">Shader</span></b>) usando o <a href="../../../../The_Asset_Editors/Shaders.htm">Editor<span class="notranslate">Shader</span></a>, e mesmo se (por exemplo)
    você só deseja mudar as posições dos vértices por exemplo, ou se você só quer mudar os valores de cor dos pixels, você ainda precisará de <b>ambos os</b> programas para que um <span class="notranslate">sombreador</span> completo funcione.</p>
  <p class="note"><b>NOTA</b>: <span class="notranslate">Os shaders</span> <b>não</b> permitem que você altere o valor de nenhuma variável que você transfira para eles, e assim estes serão chamados de <b>constantes<span class="notranslate">shader</span></b> em toda a documentação que se refere a eles.</p>
  <p>Para uma visão completa das funções e variáveis GLSL ES disponíveis que você pode usar para programar os <span class="notranslate">sombreadores</span> propriamente ditos, consulte as <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">Páginas de Referência do OpenGL ES Shading Language (GLSL ES)</a>.
    O link a seguir também é útil pois contém algumas fichas de referência rápida para a API OpenGL ES (note que apenas as duas últimas fichas mostradas são aplicáveis ao <span class="notranslate">GameMaker Studio 2</span>): <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">Cartões de Referência OpenGL ES</a>.</p>
  <p>Usar um <span class="notranslate">shader</span> em seus projetos é muito simples e requer apenas algumas linhas de código para obter o uso mais básico do mesmo:</p>
  <p class="code"><span class="notranslate">shader_set</span>(myShader);<br> draw_self();
    <br> <span class="notranslate">shader_reset</span>();
  </p>
  <p>Como você pode ver, eles são usados de maneira semelhante para misturar modos e superfícies, onde você primeiro seleciona (define) o <span class="notranslate">sombreador</span>, desenha o que você quer usando-o, e depois reinicia o alvo de sorteio novamente. Se você desejar renderizar a tela inteira através de um <span class="notranslate">shader</span>,
    e não apenas um único duende ou fundo, você precisará montar uma superfície para capturar a vista atual, e depois passar essa superfície para o <span class="notranslate">sombreador</span> (veja <a href="../../Drawing/Surfaces/Surfaces.htm">Superfícies</a> para mais informações).</p>
  <p class="note"><b>NOTA</b>: <span class="notranslate">Os shaders</span>, como qualquer coisa relacionada ao desenho, <b>só</b> podem <b>ser usados no evento do sorteio</b>. Vale notar também que, se você estiver tentando usar um valor de cor em um <span class="notranslate">sombreador</span> e o objeto não tiver textura, os resultados ficarão pretos.</p>
  <p>Se o <span class="notranslate">shader</span> que você está usando tem valores de entrada, estes são definidos usando as funções <i>uniformes</i>. Primeiro você obteria o <i>cabo</i> uniforme (que é essencialmente um valor de identificação para o uniforme a ser definido) usando a função <a href="shader_get_uniform.htm"><tt><span class="notranslate">shader_get_uniform</span>()</tt></a> em
    o <b>Create Event</b> of the instance usando o <span class="notranslate">shader</span>, e depois armazenar estas alças em variáveis, algo como isto:</p>
  <p class="code">colour_to_find = <span class="notranslate">shader_get_uniform</span>(sShaderDemo5, &quot;f_Colour1&quot;);<br> colour_to_set = shader_get_uniform(sShaderDemo5<span class="notranslate">, &quot;f_Colour2</span>&quot;);</p>
  <p>Uma vez que você tenha as alças uniformes, elas podem então ser definidas no código de <span class="notranslate">sombreamento</span> para o <b>Evento de Sorteio</b> como este:</p>
  <p class="code"><span class="notranslate">shader_set</span>(sShaderDemo5);<br> <span class="notranslate">shader_set_uniform_f</span>(color_to_find, 1,1,1 );<br> <span class="notranslate">shader_set_uniform_f</span>(color_to_set, 1,0,0 );<br> draw_sprite(sprite_index,image_index,x+24, y);<br> <span class="notranslate">shader_reset</span>();
  </p>
  <p>Uma última coisa a ser observada é que, embora <span class="notranslate">os shaders</span> sejam aceitos em todas as plataformas, eles ainda são específicos do dispositivo e se o hardware ou software do dispositivo não puder usar <span class="notranslate">shaders</span>, então você receberá um erro. Portanto, recomenda-se que você verifique se
    o <span class="notranslate">sombreador</span> foi compilado antes de se colocar uniformes ou usar o próprio <span class="notranslate">sombreador</span>, desta forma:</p>
  <p class="code">if<span class="notranslate">(shader_is_compiled</span>(myShader))<br> {
    <br> <span class="notranslate">shader_set</span>(myShader);
    <br> draw_self();
    <br> <span class="notranslate">shader_reset</span>();
    <br> }
    <br> else show_debug_message(&quot; Shader failed&quot;);</p>
  <p>Como um cheque extra você também pode chamar a função <a href="shaders_are_supported.htm"><tt><span class="notranslate">shaders_are_supported</span>()</tt></a> para ver se o hardware até mesmo suporta <span class="notranslate">shaders</span>. Em geral, você faria estas verificações no início do jogo e armazenaria os resultados como um
   <a href="../../../GML_Overview/Variables/Global_Variables.htm">variável global</a> para depois verificar mais tarde.</p>
  <p>É importante notar que o <span class="notranslate">GameMaker Studio 2</span> também suporta algumas <b>Macros de</b> compilação condicional que podem ser usadas dentro dos <span class="notranslate">shaders</span> GLSL ES para que possam executar código alternativo em plataformas específicas suportadas. As macros e as plataformas que eles irão
    a serem gerados são mostrados na tabela abaixo:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Macro<span class="notranslate">Shader</span> </th>
        <th>Valor</th>
        <th>Plataforma Alvo</th>
      </tr>
      <tr>
        <td>SIM_GLSLES_</td>
        <td>1</td>
        <td>Todas as plataformas alvo</td>
      </tr>
      <tr>
        <td>YYY_GLSL_</td>
        <td>2</td>
        <td>Mac e <span class="notranslate">Ubuntu</span><span class="notranslate">(Linux</span>)</td>
      </tr>
      <tr>
        <td>YYY_HLSL11_</td>
        <td>3</td>
        <td><span class="notranslate">Windows</span>, UWP, XboxOne</td>
      </tr>
      <tr>
        <td>YYY_PSSL_</td>
        <td>4</td>
        <td>PS4</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Quando você compila seu projeto <span class="notranslate">GameMaker Studio 2</span> em qualquer uma das plataformas listadas usando um <span class="notranslate">shader</span> no formato GLSL ES, será gerada <i>uma</i> das macros acima que poderá ser usada e verificada no código do <span class="notranslate">shader</span> como este:</p>
  <p class="code">#ifdef _YY_HLSL11_<br> // HLSL <span class="notranslate">shader</span> code here<br> #else
    <br> // Código de <span class="notranslate">shader</span> GLSL aqui<br> #endif
  </p>
  <p>Se você é novo em <span class="notranslate">shaders</span> ou quer um guia mais completo para criá-los e usá-los usando o <span class="notranslate">GameMaker Studio 2</span>, por favor, veja a página seguinte do manual:</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">Guia para o uso de <span class="notranslate">Shaders</span></a></li>
  </ul>
  <p> </p>
  <p>As seguintes funções estão disponíveis para desenho e ajuste de <span class="notranslate">shaders</span>:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="shader_get_name.htm"><span class="notranslate">shader_get_name</span></a></li>
    <li><a href="shader_get_uniform.htm"><span class="notranslate">shader_get_uniform</span></a></li>
    <li><a href="shader_get_sampler_index.htm"><span class="notranslate">shader_get_sampler_index</span></a></li>
    <li><a href="shader_set.htm"><span class="notranslate">shader_set</span></a></li>
    <li><a href="shader_set_uniform_f.htm"><span class="notranslate">shader_set_uniform_f</span></a></li>
    <li><a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader_set_uniform_f_array</span></a></li>
    <li><a href="shader_set_uniform_i.htm"><span class="notranslate">shader_set_uniform_i</span></a></li>
    <li><a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader_set_uniform_i_array</span></a></li>
    <li><a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader_set_uniform_matrix</span></a></li>
    <li><a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader_set_uniform_matrix_array</span></a></li>
    <li><a href="shader_reset.htm"><span class="notranslate">shader_reset</span></a></li>
    <li><a href="shader_is_compiled.htm"><span class="notranslate">shader_is_compiled</span></a></li>
    <li><a href="shaders_are_supported.htm"><span class="notranslate">shaders_are_supported</span></a></li>
    <li><a href="shader_current.htm"><span class="notranslate">shader_current</span></a></li>
  </ul>
  <p> </p>
  <p>Temos também uma função especial que define um estado global para todos os <span class="notranslate">shaders</span>:</p>
  <ul>
    <li><a href="shader_enable_corner_id.htm"><span class="notranslate">shader_enable_corner_id</span></a></li>
  </ul>
  <p> </p>
  <p>Ao trabalhar com amostradores de textura em <span class="notranslate">shaders</span>, você precisará de informações sobre a textura utilizada, caso em que você pode utilizar as seguintes funções:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></li>
    <li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm">sprite_get_uvs</a></li>
    <li><a href="../Fonts/font_get_texture.htm">font_get_texture</a></li>
    <li><a href="../Fonts/font_get_uvs.htm">font_get_uvs</a></li>
    <li><a href="../../Drawing/Textures/texture_get_width.htm">textura_get_width</a></li>
    <li><a href="../../Drawing/Textures/texture_get_height.htm">Textura_esquadre_altura</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_width.htm">textura_get_texel_width</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_height.htm">textura_get_texel_height</a></li>
    <li><a href="../../Drawing/Textures/texture_set_stage.htm">textura_set_set_stage</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm">gpu_set_texfilter_ext</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm">gpu_set_texrepeat</a></li>
  </ul>
  <p> </p>
  <p>Embora este manual <b>não</b> abranja nenhuma das funções e variáveis do <span class="notranslate">sombreador</span> Open GL, ele contém uma lista das que são exclusivas do <span class="notranslate">GameMaker Studio 2</span>. Estas constantes não fazem parte da especificação da Open GL para <span class="notranslate">shaders</span> e são fornecidas
    para simplificar a integração de <span class="notranslate">shaders</span> em seus projetos.</p>
  <ul class="colour">
    <li><a href="Shader_Constants.htm">Constantes de<span class="notranslate">sombreamento</span> </a></li>
  </ul>
  <p> </p>
  <p>Finalmente, o <span class="notranslate">GameMaker Studio 2</span> permite que você defina seus próprios <b>formatos de vértices</b> a partir dos quais você pode criar seus próprios primitivos personalizados. Isto pode acelerar muito as operações <span class="notranslate">de sombreamento</span> ou pode ser usado para ampliar suas capacidades e criar efeitos surpreendentes.
    Você pode encontrar informações sobre isto nas seções seguintes:</p>
  <ul class="colour">
    <li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitivos e formatos de vértices</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Asset_Management.htm">Gestão de ativos</a></div>
        <div style="float:right">A seguir: <a href="../Sequences/Sequences.htm">Sequências</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
<span class="notranslate">Shaders</span>
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
<span class="notranslate">shader</span>_functions
-->

</body></html>