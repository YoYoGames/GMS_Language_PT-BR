<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>




  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>point_distance_3d</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for point_distance_3d" />
  <meta name="rh-index-keywords" content="point_distance_3d" />
  <meta name="search-keywords" content="point_distance_3d" />
</head>

<body>




  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>point_distance_3d</h1>
  <p>Esta função pega os componentes fornecidos do vetor e retorna o comprimento (distância) do vetor. Ela funciona exatamente da mesma forma que <a href="point_distance.htm"><tt>point_distance()</tt></a> mas com a adição de fatorização no valor z
    (profundidade) para uso no espaço 3D.</p>
  <p> </p>
  <h4><b>Sintaxe:</b></h4>
  <p class="code">point_distance_3d(x1, y1, z1, x2, y2, z2);</p>
  <table>
    <tbody>
      <tr>
        <th>Argumento</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td>x1</td>
        <td>A coordenada x do primeiro componente do vetor</td>
      </tr>
      <tr>
        <td>y1</td>
        <td>A coordenada y do primeiro componente do vetor</td>
      </tr>
      <tr>
        <td>z1</td>
        <td>A coordenada z do primeiro componente do vetor</td>
      </tr>
      <tr>
        <td>x2</td>
        <td>A coordenada x do segundo componente do vetor</td>
      </tr>
      <tr>
        <td>y2</td>
        <td>A coordenada y do segundo componente do vetor</td>
      </tr>
      <tr>
        <td>z2</td>
        <td>A coordenada z do segundo componente do vetor</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Devoluções:</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Exemplo:</h4>
  <p class="code">var inst, ex, ey, ez;<br> inst = instance_nearest(x, y, enemy);<br> se inst<br> {
    <br> ex = inst.x;<br> ey = inst.y;<br> ez = inst.z;<br> if point_distance_3d(x, y, z, ex, ey, ez) &lt; 200<br> {
    <br> instance_create_layer(x, y, &quot;Bullets&quot;, obj_Missile)<br> }
    <br> }
  </p>
  <p>O código acima obterá as coordenadas x e y e z do inimigo mais próximo e depois as utilizará para verificar a distância (comprimento) do vetor formado por elas e as coordenadas do jogador. Se o valor for inferior a 200, o objeto jogador irá criar uma instância
    de &quot;obj_Missile&quot;.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="Angles_And_Distance.htm">Ângulos e distância</a></div>
        <div style="float:right">Próximo: <a href="distance_to_object.htm">distância_a_objeto</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
point_distance_3d
-->
  <!-- TAGS
point_distance_3d
-->

</body></html>