<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>repita</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the repeat function" />
  <meta name="rh-index-keywords" content="repeat" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>repita</h1>
  <p>A <span class="notranslate">linguagem GameMaker</span> tem uma série de maneiras que você pode realizar <i>loops</i>, ou seja: ter uma declaração ou declarações iterativas sobre si mesmo um certo número de vezes. A mais simples delas é a <tt>repetição da</tt> afirmação, que tem a forma:</p>
  <p class="code">repetir (&lt;expressão&gt;)<br> {<br> &lt;declaração&gt;;<br> &lt;declaração&gt;;<br>...<br> }</p>
  <p>Com a <tt>repetição</tt> da <a class="glossterm" data-glossterm="declaração" href="#">afirmação</a> dada repete-se o número de vezes indicado pelo valor arredondado da <a class="glossterm" data-glossterm="expressão" href="#">expressão</a>. Para
    exemplo, o seguinte cria cinco bolas em posições aleatórias:</p>
  <p class="code">repita (5)<br> {
    <br> instance_create_layer(random(400), random(400), &quot;Instances&quot;, obj_ball);<br> }
  </p>
  <p>Isto pode ser muito útil para evitar digitar o mesmo código várias vezes, ou para usar matrizes, ou para contar através de várias operações, etc... Você também não está limitado a usar uma única declaração, e pode repetir múltiplas declarações anexando
    dentro de parênteses encaracolados <tt>{}</tt>. Por exemplo:</p>
  <p class="code">var _x = 32;<br> repetir (global.p_lives)<br> {<br> draw_sprite(spr_heart, 0, _x, 32);<br> _x += sprite_get_width(spr_heart);<br> }</p>
  <p>O exemplo acima repete as afirmações entre colchetes por muitas <a class="glossterm" data-glossterm="iteração" href="#">iterações</a>que a variável global &quot;vive&quot; tenha, e cada iteração desenha
    o duende do coração na posição <span class="inline">_x</span>, depois move a posição um pouco com base na largura do duende do coração.</p>
  <p><strong>Quando você deve usar um loop <span class="inline">repeat</span>?</strong> Sempre que você quiser repetir uma ou mais afirmações um número fixo de vezes sem nenhuma necessidade específica de manter uma contagem das iterações.</p>
  <p>Vale a pena notar que você pode usar as declarações especiais <span class="inline"><a href="break.htm">break</a></span> e <span class="inline"><a href="continue.htm">continue</a></span> dentro de um
    <font face="Lucida Console"><span style="font-size: 16px;"><b>repita</b></span></font> loop também. Usando <span class="inline">break</span> sairá imediatamente do laço e passará para qualquer código que esteja no evento ou função depois que o laço tiver terminado, por exemplo:</p>
  <p class="code">var i = 0;<br> var temp = 0;<br> repetir (10)<br> {<br> temp += array[i];<br> if (temp &gt; max_total)<br> {<br> break;<br> } <br> else<br> {<br> i += 1;<br> } <br> }</p>
  <p>O código acima passa por 10 valores de <a href="../Arrays.htm">matriz</a> e os adiciona a uma variável local. Se o total da variável local for maior do que o valor dado para <span class="inline">max_total</span>, então o loop é terminado usando
    quebra, caso contrário, o loop continuará. </p>
  <p>Um exemplo de utilização do <span class="inline">continue</span> em um loop <span class="inline">repeat</span> seria:</p>
  <p class="code">repeat(10)<br> { <br> var _x = random(room_width);<br> var _y = random(room_height);<br> if (instance_position(_x, y, obj_Enemy)<br> {
    <br> continuar;
    <br> }
    <br> instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br> }</p>
  <p>Este código irá repetir 10 vezes, gerando uma posição aleatória da sala e depois verificando se existe uma instância do objeto <span class="inline">obj_Enemy</span> nessa posição. Se existir, a iteração atual do loop é terminada usando <span class="inline">continue</span> e uma nova iteração é iniciada, e se não existir, então uma instância do objeto <span class="inline">obj_Enemy</span> é criada na posição aleatória.</p>
  <p>Para mais exemplos de funções de loop, consulte as seções sobre <a href="while.htm"><tt>enquanto</tt></a>, <a href="do___until.htm"><tt>fazer... até</tt></a>e <a href="for.htm"><tt>para</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">Próximo: <a href="while.htm">enquanto</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
repeat
-->
  <!-- TAGS
repeat
-->

</body></html>