<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>tentar / apanhar / finalmente</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>tentar / apanhar / finalmente</h1>
  <p>A <tt>tentativa</tt>, <tt>captura</tt> e <tt>finalmente</tt> as declarações podem ser usadas em seu jogo para verificação de erros e permitir que você teste blocos de código e controle o que acontece se alguma <a href="../../../Additional_Information/Errors/Runner_Errors.htm">exceção de<span class="notranslate">tempo de execução</span></a> ocorrer. O uso destas evitará que a exceção termine o jogo e mostre a mensagem de erro padrão para o usuário, mas isto significa que você terá que lidar com o que acontece em seguida neste caso, como salvar arquivos de log - por exemplo - e terminar o
    jogo graciosamente (note que se você optar por nada fazer, seu jogo pode se tornar instável e não funcionar corretamente).</p>
  <p>A <tt>sintaxe</tt> mais básica da tentativa é a seguinte:</p>
  <p class="code">tente<br> {
    <br> &lt;statement1&gt;;
    <br> &lt;statement2&gt;;
    <br> ...<br> }
  </p>
  <p>No entanto, ter uma <tt>tentativa</tt> sem nada para realmente lidar com qualquer exceção que o código possa produzir não será muito útil, por isso costumamos emparelhá-lo com um <tt>senão</tt>, com a seguinte sintaxe:</p>
  <p class="code">tente<br> {
    <br> &lt;statement1&gt;;
    <br> &lt;statement2&gt;;
    <br> ...
    <br> }
    <br> catch(&lt;variavel&gt;)
    <br> {
    <br> &lt;statement1&gt;;
    <br> &lt;statement2&gt;;
    <br> ...
    <br> }
  </p>
  <p>O que a <tt>captura</tt> permite executar um código extra fornecido no bloco seguinte quando uma exceção da <tt>tentativa</tt> anterior tiver sido capturada. Se esta for uma exceção de <span class="notranslate">tempo de execução</span>, então a variável fornecida pode ser usada para acessar uma <a href="../Structs.htm">estrutura</a> que conterá as seguintes informações:</p>
  <p class="code">{<br> mensagem : &quot;&quot;, // uma string que é uma mensagem curta para esta exceção<br> longMessage : &quot;&quot;, // uma string que é uma mensagem mais longa para esta exceção<br> script : &quot;&quot;, // uma string
    que descreve de onde veio a exceção<br> stacktrace : [ &quot;&quot;, &quot;&quot; ], // um conjunto de cordas que é a estrutura da pilha a exceção foi gerada<br> }
  </p>
  <p>Um exemplo simples de uso é mostrado abaixo:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br> tente
    <br> {
    <br> c = a div b;<br> }
    <br> catch( _exceção)<br> {
    <br> show_debug_message(_exception.message);
    <br> show_debug_message(_exception.longMessage);
    <br> show_debug_message(_exception.script);
    <br> show_debug_message(_exception.stacktrace);
    <br> }
  </p>
  <p>Pode ser que você queira executar algum código independentemente de uma exceção ter sido lançada ou não, e para isso você pode adicionar um bloco <tt>final</tt>. A sintaxe <span class="inline">finally</span> é:</p>
  <p class="code">finalmente<br> {
    <br> &lt;statement1&gt;;
    <br> &lt;statement2&gt;;
    <br> etc....
    <br> }
  </p>
  <p>Vale a pena notar que você pode ter qualquer combinação destes juntos, ou seja</p>
  <ul class="colour">
    <li><tt>tentar</tt> / <tt>finalmente</tt></li>
    <li><tt>tentar</tt> / <tt>pegar</tt></li>
    <li><tt>tentar</tt> / <tt>apanhar</tt> / <tt>finalmente</tt></li>
  </ul>
  <p>Note que dentro do bloco <tt>final</tt> você <em>não pode </em>usar <a href="break.htm"><tt>quebra</tt></a>, <a href="continue.htm"><tt>continuar</tt></a>, <a href="exit.htm"><tt>saída</tt></a> ou <a href="return.htm"><tt>retornar</tt></a> declarações como
    não têm significado neste contexto e o compilador irá gerar um erro se forem utilizados.</p>
  <p>Finalmente, você também pode aninhar várias <tt>tentativas</tt> / <tt>capturas</tt> / <tt>finalmente</tt> umas dentro das outras, por exemplo:</p>
  <p class="code">var a = 0, b = 0, c = 0;<br> tente
    <br> {
    <br> tente
    <br> {
    <br> c = a div b;<br> }
    <br> finalmente
    <br> {
    <br> ++a;
    <br> }
    <br> }
    <br> catch(_exceção)
    <br> {
    <br> ++a;
    <br> show_debug_message(_exception.message);
    <br> show_debug_message(_exception.longMessage);
    <br> show_debug_message(_exception.script);
    <br> show_debug_message(_exception.stacktrace);
    <br> }
    <br> finalmente
    <br> {
    <br> show_debug_message(&quot;a = &quot; + string(a));<br> }
  </p>
  <p>Vale notar que você pode assumir a mensagem de erro padrão <span class="notranslate">do GML</span> e usar seu próprio código de manuseio, chamando a função <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><tt>exception_unhandled_handler()</tt></a>. Este
    A <a href="../<span class=" notranslate"="">Runtime_Functions.htm">função de<span class="notranslate">tempo de execução</span></a> permite que você forneça um <a href="../Method_Variables.htm">método</a> personalizado a ser usado que será chamado sempre que qualquer exceção não-deslaçada ocorrer em seu jogo.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">Próximo: <a href="throw.htm">arremessar</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>