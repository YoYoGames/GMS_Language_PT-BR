<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>enquanto</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>enquanto</h1>
  <p>A <span class="notranslate">linguagem GameMaker</span> tem uma série de formas de realizar <i>loops</i>, uma das mais importantes é o loop <tt>while</tt>. Esta função de loop tem a forma:</p>
  <p class="code">enquanto (&lt;expressão&gt;)<br> {<br> &lt;declaração&gt;;<br> &lt;declaração&gt;;<br>...<br> }</p>
  <p>Aqui você tem uma <a class="glossterm" data-glossterm="declaração" href="#">declaração</a> que é iterada repetidamente com base nos resultados da avaliação de uma <a class="glossterm" data-glossterm="expressão" href="#">expressão</a>, ou seja: com
    um loop <span class="inline">while</span>, desde que a expressão avalie para <span class="inline">true</span>, a declaração (que também pode ser um bloco de código de múltiplas declarações com colchetes <tt>{}</tt>) é executada. Abaixo você pode encontrar
    um exemplo de uma maneira típica de usar &quot;enquanto&quot;:</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br> {
    <br> x -= 1;<br> }
  </p>
  <p>O código acima está verificando uma colisão entre a instância de chamada e uma instância de &quot;parede&quot;, e realizará várias iterações <a class="glossterm" data-glossterm="iteração" href="#">enquanto</a><span class="glossextra">uma</span> é
    ocorrendo - movendo a instância deixada por um pixel - até que a instância não esteja mais em colisão.</p>
  <p><strong>Quando você deve usar um loop <span class="inline">while</span>?</strong> Ele deve ser usado sempre que você quiser repetir uma ou mais declarações, mas não sabe - ou se importa - quantas vezes ele tem que repetir, tendo em mente que se o
    A avaliação inicial é <span class="inline">false</span>, as declarações podem nem mesmo ser executadas.</p>
  <p>Por favor, não que você deva <strong>ser muito cuidadoso com <tt>os</tt></strong> seus laços! Você pode facilmente fazer loops <i>infinitos</i>, neste caso seu jogo ficará pendurado e não reagirá mais a nenhuma entrada do usuário e precisará ser fechado à força. Por exemplo:</p>
  <p class="code">enquanto (!place_free(x, y))<br> {
    <br> x = random(room_width);<br> y = random(room_height);<br> }
  </p>
  <p>Agora, o código acima pode funcionar bem, mas também pode causar um loop infinito se a instância não conseguir encontrar uma posição vazia para onde se mover, e isto fará com que o jogo fique pendurado. Se você se encontrar em uma posição onde este tipo de coisa é uma possibilidade,
    então você deve usar um tipo de loop diferente sem bloqueio, ou usar uma verificação variável adicional na expressão (você pode usar múltiplas expressões junto com o <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>,
    <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a> e <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a><span class="glossextra">operadores</span> para o cheque):</p>
  <p class="code">var _check = 0;<br> while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br> {
    <br> x = random(room_width);<br> y = random(room_height);<br> _check += 1;<br> }
    <br> if _check &gt;= 100<br> {<br> // code failed, so deal with it<br> }</p>
  <p>Alternativamente, você pode usar a declaração <span class="inline"><a href="break.htm">break</a></span> para quebrar o loop, por exemplo, o seguinte código gerará 100 números aleatórios e depois continuará, mesmo que a avaliação <span class="inline">while</span> seja <em>sempre</em> <span class="inline">true</span>:</p>
  <p class="code">var i = 0;<br> enquanto (verdadeiro)<br> {
    <br> x[i] = random(room_width);<br> y[i] = random(room_height);<br> if ((i++) &gt;= 100)<br> {<br> break;<br> } <br> }
  </p>
  <p>Você também pode usar a declaração de <a href="continue.htm">continuação</a> em um loop <span class="inline">while</span>. Usando isto, terminará a atual iteração do loop e reiniciará o loop novamente em uma nova iteração, por exemplo:</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br> var _num = 0;<br> while (!file_text_eof(file))<br> {<br> var _s = file_text_readln(file);<br> if (_s == &quot;&quot;)<br> {<br> continue;<br> } <br> str[num++] = _s;<br> } <br> file_text_close(file);
  </p>
  <p>Este código acima abrirá um arquivo e lerá uma linha a partir dele cada iteração de loop até o final do conteúdo do arquivo. Se a linha sendo lida for uma string vazia, a atual iteração de loop é terminada usando a declaração <span class="inline">continue</span> e uma nova iteração será iniciada, caso contrário a string é adicionada a um <a href="../Arrays.htm">array</a> e a posição do array é incrementada.</p>
  <p>Para mais exemplos de funções de loop, consulte as seções sobre <a href="repeat.htm"><tt>repita</tt></a>, <a href="do___until.htm"><tt>fazer... até</tt></a>e <a href="for.htm"><tt>para</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">Próximo: <a href="do___until.htm">fazer / até</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->

</body></html>