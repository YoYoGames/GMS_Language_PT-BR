<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>fazer / até</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until functions" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>fazer / até</h1>
  <p>Uma função é outra forma de iterar uma ou mais<span class="glossextra">afirmações</span> várias vezes, e é realmente uma afirmação &quot; <tt>fazer</tt>...<tt>até&quot;</tt> como
    você não pode ter um sem o outro, pois você está dizendo ao <span class="notranslate">GameMaker Studio 2</span> para fazer algo até que uma <a class="glossterm" data-glossterm="expressão" href="#">expressão</a> específica retorne à <tt>realidade</tt>. Ele tem esta forma:</p>
  <p class="code">do<br> {
    <br> &lt;declaração&gt;;
    <br> &lt;declaração&gt;;
    <br> ...
    <br> }
    <br> até (&lt;expressão&gt;);</p>
  <p>A declaração (que pode ser um bloco de código de múltiplas declarações dentro de colchetes <tt>{}</tt>) é executada até que a expressão seja encontrada como <tt>verdadeira</tt>, e a declaração inicial é <strong>sempre executada pelo menos uma vez</strong>. Abaixo de você
    pode encontrar um exemplo de uma maneira típica de usar <tt>fazer... até</tt>:</p>
  <p class="code">do<br> {
    <br> x = random(room_width);<br> y = random(room_height);<br> }
    <br> até (place_free(x, y));</p>
  <p>O código acima tenta colocar o objeto atual em uma posição livre e irá definir as variáveis x/y pelo menos uma vez, e então realizar tantas <a class="glossterm" data-glossterm="iteração" href="#">iterações</a>quantas forem necessárias
    até que a expressão <tt>place_free()</tt> retorne <tt>verdadeiro</tt>.</p>
  <p><strong>Quando você deve usar um loop <span class="inline">do</span> / <span class="inline">until</span>?</strong> Ele deve ser usado sempre que você quiser repetir uma ou mais declarações, mas não sabe quantas vezes ele tem que repetir, e quer
    para garantir que as declarações sejam executadas pelo <em>menos uma vez</em> antes do término do loop.</p>
  <p>Você também pode usar o <a href="break.htm"><span class="inline">break</span></a> e <a href="continue.htm"><span class="inline">continue</span></a> declarações dentro de seus loops <span class="inline">do</span>. Usando <span class="inline">break</span>, você poderá
    sair imediatamente do laço e passar para qualquer código que esteja no evento ou função após o laço ter terminado, por exemplo</p>
  <p class="code">var _id = noone;<br> do
    <br> {<br> _id = lista[| 0];<br> se a instância_existir(_id)<br> {<br> _break;<br> } <br> ds_list_delete(list, 0);<br> } <br> até (ds_list_empty(list));<br> target = _id;</p>
  <p>No código acima, nós criamos uma variável local e a definimos para manter a palavra-chave <a href="../Instance_Keywords.htm">noone</a>. Em seguida, realizamos um loop <span class="inline">do / until</span> verificando a primeira posição de uma lista DS para ver se ela contém uma
    exemplo de identificação, e se o fizer, então <span class="inline">break</span> o laço, caso contrário o valor para a posição da lista é excluído. Após o término do laço (seja pelo <span class="inline">break</span> ou porque a lista está vazia) o local
    O valor da variável é então atribuído à variável de instância <span class="inline">target</span>.</p>
  <p>Um exemplo de uso continuado em um loop <span class="inline">do / until</span> seria:</p>
  <p class="code">do<br> {
    <br> var _x = random(room_width);<br> var _y = random(room_height);<br> if (instance_position(_x, y, obj_Enemy)<br> {
    <br> continuar;
    <br> }
    <br> instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br> }
    <br> até (instance_count(obj_Enemy) &gt;= 10);</p>
  <p>Este código gerará uma posição de sala aleatória e então verificará se existe uma instância do objeto <span class="inline">obj_Enemy</span> nessa posição. Se existir, a iteração atual do loop é terminada usando <span class="inline">continue</span> e
    uma nova iteração é iniciada, e se não for, então uma instância do objeto <span class="inline">obj_Enemy</span> é criada na posição aleatória. O loop só terminará quando houver 10 ou mais instâncias do objeto na sala.</p>
  <p>Uma nota final: tenha cuidado com seus loops, pois você pode facilmente <tt>fazê-los</tt> loop para sempre, neste caso seu jogo ficará pendurado e não reagirá mais a nenhuma entrada do usuário e eles terão que forçar o fechamento.</p>
  <p>Para mais exemplos de palavras-chave em loop, consulte as seções sobre <a href="repeat.htm"><tt>repita</tt></a>, <a href="while.htm"><tt>enquanto</tt></a>e <a href="for.htm"><tt>para</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Language_Features.htm">Características lingüísticas</a></div>
        <div style="float:right">Próximo: <a href="for.htm">para</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->

</body></html>