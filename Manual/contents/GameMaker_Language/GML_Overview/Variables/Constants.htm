<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Constantes</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the different GML constants" />
  <meta name="rh-index-keywords" content="Constants,macro,enum,pointer_invalid,pointer_null,undefined,NaN,infinity,true,false,pi" />
  <meta name="search-keywords" content="constants,macros,enums,macro,enum" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Constantes</h1>
  <p>Uma constante é um tipo de variável que é definida uma vez no início do jogo e depois nunca muda. Na verdade, os valores constantes <em>não podem ser alterados após terem sido declarados</em>. Isto os torna ideais para manter valores que são usados em todo o
    jogo para identificar dados especiais.</p>
  <p>Na <span class="notranslate">linguagem GameMaker</span> existem dois tipos de constantes definidas pelo usuário: <strong>macros</strong> e <strong>enums</strong>, ambos explicados abaixo. Observe também que qualquer valor que seja sempre o mesmo é classificado como uma constante, independentemente do
   <a href="../Data_Types.htm">tipo de dado</a>, por exemplo, um fio ou o número 3.</p>
  <p class="note"><strong>OBSERVAÇÃO</strong>: A <span class="notranslate">linguagem GameMaker</span> também tem uma série de valores constantes incorporados que são usados para identificar coisas específicas. Estes estão delineados nas páginas apropriadas para as funções de <span class="notranslate">tempo de execução</span> que os requerem na seção <a href="../../GML_Reference/GML_Reference.htm">Referência<span class="notranslate">GML</span></a>.</p>
  <p> </p>
  <h2>Macros</h2>
  <p>Embora não sejam exatamente variáveis, as macros são semelhantes a elas na forma como são usadas, ou seja: elas são valores nomeados que você pode usar em todo o seu código para substituir valores <a class="glossterm" data-glossterm="código rígido" href="#">codificados</a>. Basicamente, uma macro
    é uma variável denominada que detém um valor único constante de qualquer <a href="../Data_Types.htm">tipo de dado</a>. Você pode definir suas próprias macros usando o <a href="../Script_Functions.htm">Script Editor</a> e depois usá-las em seu código e <span class="notranslate">DnD™</span>como se elas
    eram variáveis regulares, com a única diferença de que elas <i>não podem ser alteradas no jogo</i>.</p>
  <p>A estrutura sintáctica de uma macro é a seguinte:</p>
  <p class="code">#macro <i>&lt;variável&gt;&gt;valor&gt;</i> </p>
  <p>Por exemplo, digamos que você define a seguinte macro &quot;<span class="inline">total_weapons</span>&quot; (note o precedente &quot;<span class="inline">#</span>&quot; e a falta de dois pontos &quot;<span class="inline">;</span>&quot; no final):</p>
  <p class="code">#macro total_armas 10</p>
  <p>Você então chamaria isto em seu código desta maneira:</p>
  <p class="code">if ++pos == total_armas<br> {
    <br> pos = 0;<br> }
  </p>
  <p>Note que você não seria capaz de alterar o valor constante, portanto, um código como este causará o travamento do jogo:</p>
  <p class="code">total_armas = 11;</p>
  <p>Você pode definir uma macro em qualquer lugar em seu código ou em um script e ela será <i>pré-compilada</i> e incluída em seu jogo como se estivesse lá desde o início, mas recomendamos que você crie um recurso de script dedicado e defina todas as suas macros lá dentro.
    Será mais fácil de organizar e debugar mais tarde!</p>
  <p>Se você precisa do valor de uma macro para mudar em tempo de execução, então você provavelmente deve torná-la uma <a href="Global_Variables.htm">variável global</a>, já que estas podem ser mudadas de código durante um jogo, a menos que você configure a macro para ser uma<span> <a href="../Runtime_Functions.htm"><span class="notranslate">tempo de execução</span> </a></span>   <a href="../Runtime_Functions.htm">função</a>. Ao definir a macro para uma função, significa que esta função será chamada toda vez que você usar a macro. Por exemplo, a função macro:</p>
  <p class="code">#macro col make_colour_hsv(irandom(255), 255, 255)</p>
  <p>Você então chamaria esta macro de algo parecido com isto:</p>
  <p class="code">image_blend = col;</p>
  <p>O uso deste código fará com que a imagem misture uma cor diferente cada vez que a macro for usada. Vale notar que você também pode dividir as macros em várias linhas usando o caracter <span class="inline"><tt>\</tt></span> para mostrar onde a linha quebra.
    Um exemplo seria algo como:</p>
  <p class="code">#macro hello show_debug_message(&quot;Hello&quot; + \<br> string(player_name) + \<br> &quot;, como você está hoje?&quot;)</p>
  <p>Isto é puramente cosmético, pois a divisão de uma macro como esta não terá efeito sobre o resultado da macro final quando usada, e é simplesmente para dar suporte a textos de várias linhas em macros que têm linhas de código mais longas.</p>
  <p>Uma característica muito importante das macros é que elas podem ser definidas para uso com <a href="../../../Settings/Configurations.htm">Configurações</a> (configs) específicas, o que significa que você pode ter o mesmo nome de macro, mas dar-lhe valores diferentes com base no atual
    configuração selecionada. Por exemplo, digamos que você tenha uma configuração para anúncios <span class="notranslate">Android</span> e outra para anúncios <span class="notranslate">iOS</span>, então você poderia definir uma única macro para manter o valor de ID do aplicativo requerido:</p>
  <p class="code">#macro ad_id &quot;&quot;;<br> #macro Android:ad_id <span class="notranslate">&quot;</span>com.yoyogames.googlegame&quot;<br> #macro iOS:ad_id &quot;com.yoyogames.appstoregame&quot;</p>
  <p>Como você pode ver, primeiro você dá o nome da configuração, depois um dois pontos <span class="inline">:</span> e depois o nome e o valor da macro. Note que você não pode ter nenhum espaço branco entre os dois pontos <span class="inline">:</span> e nem o nome da configuração nem o valor da
    nome macro, caso contrário, você receberá um erro.</p>
  <p> </p>
  <h2 id="enumhead">Enums</h2>
  <p>Um enumero é um &quot;enumerador&quot;, e permite essencialmente criar seu próprio tipo de dados limitado com uma lista de valores constantes, e eles têm a seguinte estrutura:</p>
  <p class="code">enumerar <i>&lt;variável&gt;<br></i> 
    {<br>
       <i> &lt;constante&gt; [= &lt;valor&gt;</i> <i>],</i><br>
       <i> &lt;constante&gt; [= &lt;valor&gt;</i> <i>],</i><br> // etc...<br> }</p>
  <p>No exemplo a seguir, criamos um enumero para as cores do arco-íris e lhe atribuímos várias constantes e valores padrão:</p>
  <p class="code">enum rainbowcolours<br> {<br> red,<br> orange,<br> yellow,<br> green,<br> blue,<br> indigo,<br> violet<br> }</p>
  <p>As entradas de enumeração só podem ser <b>números inteiros</b> ou <b><span class="glossextra">expressões</span></b> com enumeração anterior que avaliam para um número inteiro e, por padrão, são numeradas
    de 0 para cima, portanto, nosso exemplo dado acima seria padrão para <tt>vermelho = 0</tt>, <tt>laranja = 1</tt>, <tt>amarelo = 2</tt>, etc...</p>
  <p>Você também pode atribuir valores às variáveis do enumero no momento da criação:</p>
  <p class="code">enum enum_test<br> {<br> val = 10;<br> } <br>
    <br> enum rainbowcolours<br> {<br> red = 5,<br> orange = 5 * 2,<br> yellow = 15,<br> green = 20,<br> blue = 25,<br> indigo = 30,<br> violet = 35 * enum_test.val<br> }</p>
  <p>Observe no exemplo acima que usamos outro enumero para criar uma expressão para &quot;violeta&quot;. Isto só funcionará se o enumero a ser referenciado tiver sido criado <i>antes do</i> enumero que o está usando em uma expressão, mas não funcionará para variáveis ou
    uma vez que o valor enumeral deve poder ser avaliado como uma constante quando o projeto está sendo <a class="glossterm" data-glossterm="Compilação" href="#">compilado</a>. Observe também que todos os valores de enumeração são avaliados para valores <b>inteiros</b>, e quando se cria
    seus próprios <i>valores inteiros</i> devem estar cientes de que <i>somente valores inteiros são permitidos</i> para que os enumeros funcionem. Este valor pode ser qualquer número inteiro que um número de precisão duplo de ponto flutuante possa representar, inclusive valores negativos.</p>
  <p>Para acessar posteriormente o valor dentro de um determinado tipo de enumeração, você pode usar o <tt> método de</tt> ponto <tt>&quot;...&quot;,</tt> assim:</p>
  <p class="code">variável = &lt;nome_nome_enum&gt;.&lt; enum_variável<em>&gt;;</em></p>
  <p>Como exemplo, vamos usar o enumero &quot;<span class="inline">rainbowcolours</span>&quot; que criamos no código acima:</p>
  <p class="code">colour_value = rainbowcolours.green * rainbowcolours.red;</p>
  <p>A variável <span class="inline">colour_value</span> passaria a ter o valor 100 (20 * 5).</p>
  <p>Observe que você <em>não pode </em>modificar os valores de nenhuma constante de enumeração após sua criação, da mesma forma que não pode modificar as macros após elas terem sido criadas.</p>
  <p class="note"><strong>NOTA</strong>: Os valores de enumeração são armazenados como int64s, portanto funcionando <tt><a href="../../GML_Reference/Variable_Functions/is_real.htm">is_real()</a></tt> sobre eles retornarão <tt>falsos</tt>.</p>
  <p> </p>
  <h2>Constantes Incorporadas</h2>
  <p>A tabela a seguir mostra uma lista das constantes incorporadas que podem ser devolvidas por algumas funções e operações em seus projetos:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constante</th>
        <th>Descrição</th>
      </tr>
      <tr>
        <td><span class="inline">pointer_null</span></td>
        <td>Esta constante indica que o ponteiro não está apontando para nada significativo (o mesmo que<span> </span><tt>NULL</tt><span> </span>em C++ ou nulo em C#)</td>
      </tr>
      <tr>
        <td><span class="inline">pointer_invalid</span></td>
        <td>Esta constante significa simplesmente que o valor não é um ponteiro válido</td>
      </tr>
      <tr>
        <td><span class="inline">undefined</span></td>
        <td>Esta constante é retornada quando uma função tem que retornar <em>algo</em>, mas não tem valor apropriado ou &quot;correto&quot; para retornar</td>
      </tr>
      <tr>
        <td><span class="inline">NaN</span></td>
        <td><span>Esta constante que pode ser retornada quando o compilador não pode avaliar os resultados de uma operação como um número - por exemplo, 0 / 0 não pode ser definida como um número real, e é, portanto, representada por </span><tt>NaN</tt></td>
      </tr>
      <tr>
        <td><span class="inline">infinity</span></td>
        <td><tt><span data-highlight-container="true"><span data-highlight="true"><font face="open_sansregular"><span style="font-size: 18px; font-weight: 400;">Esta constante </span></font></span></span></tt><span>refere-se a um número considerado infinito, tal como o resultado que você obteria ao dividir qualquer valor de ponto flutuante por zero, por exemplo: 1,0/0.</span></td>
      </tr>
      <tr>
        <td><span class="inline">true</span></td>
        <td>Esta constante representa o valor 1, que é o que o <span class="notranslate">GameMaker Studio</span> avaliará como um &quot;verdadeiro&quot; booleano (note que qualquer valor igual ou maior que 1 será avaliado como <span class="inline">true</span>).</td>
      </tr>
      <tr>
        <td><span class="inline">false</span></td>
        <td>Esta constante representa o valor 0, que é o que o <span class="notranslate">GameMaker Studio</span> avaliará como um &quot;falso&quot; booleano (note que qualquer valor menor ou igual a 0 será avaliado como <span class="inline">false</span>).</td>
      </tr>
      <tr>
        <td><span class="inline">pi</span></td>
        <td>Esta constante representa o valor de pi: 3,141592653589793280 etc... embora o valor exato dependerá de vários fatores como o sistema operacional ou a plataforma a ser visada.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Variables_And_Variable_Scope.htm">Variáveis e Escopo de Variáveis</a></div>
        <div style="float:right">A seguir: <a href="Local_Variables.htm">Variáveis locais</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
constants
macros
enums
macro
enum
-->
  <!-- TAGS
constants
macro
enum
-->

</body></html>