<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>O Editor <span class="notranslate">Shader</span> </h1>
  <p><img alt="Shader Editor" class="center" src="../assets/Images/Asset_Editors/Editor_Shaders.png"><span class="notranslate">Os shaders</span> são uma ferramenta muito poderosa que pode ser usada para manipular os gráficos que seu jogo apresenta para a tela, permitindo efeitos incrivelmente rápidos que
    pode variar desde, por exemplo, adicionar uma nuance de cor sutil a um duende, até efeitos de distorção de tela inteira. Mas o que é um <span class="notranslate">sombreador</span>?</p>
  <p>Um <span class="notranslate">shader</span> é basicamente um programa de duas partes que roda diretamente na própria placa gráfica, tornando-o muito rápido, já que a GPU está fazendo todo o trabalho e liberando ciclos de CPU para seu código de jogo. O <span class="notranslate">shader</span> completo é composto de um programa de <span class="notranslate">shader de</span> vértices, e
    um programa de <span class="notranslate">sombreamento de</span> fragmentos (também conhecido como um <span class="notranslate">sombreador de</span> pixels). Estes dois minúsculos programas trabalham em conjunto para manipular o que a placa gráfica renderiza para a tela. Isto então permite manipular em tempo real, a posição, a cor e o alfabeto
    valores que são realmente <a class="glossterm" data-glossterm="traduzido em" href="#">apresentados</a> no <a class="glossterm" data-glossterm="buffer de exibição" href="#">buffer de exibição</a>.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"> <span class="notranslate">Shader de</span>vértice</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">O <span class="notranslate">Shader</span> Vertex é o estágio de <span class="notranslate">sombreamento</span> programável no pipeline de renderização que trata do processamento de vértices individuais (os pontos dos triângulos usados para renderizar qualquer imagem), e quando você está renderizando uma geometria - como um duende ou uma superfície
      - O <span class="notranslate">GameMaker Studio 2</span> cria um fluxo de vértices - chamado de <strong>Vertex Buffer </strong>- que define a geometria desses triângulos. Um duende, por exemplo, teria uma geometria de dois triângulos (normalmente chamados de <em>polígonos</em>) renderizados
      juntos para formar um &quot;quad&quot;. Este fluxo de vértices do Vertex Buffer é alimentado como uma entrada para o Vertex <span class="notranslate">Shader</span>, que pode processar os dados dos vértices de uma forma programável. A saída do Vertex <span class="notranslate">Shader</span> é usada pela GPU para montar os triângulos,
      que são então devidamente cortados e abatidos na porta de visualização e na câmera de visualização, e então enviados para o bloco rasterizador da GPU que gera um novo fluxo de saída, constituído por algo chamado <strong>Fragmentos</strong>. Estes são dados minúsculos
      Cada uma delas é relativa a um único pixel que aparece na tela.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Fragment <span class="notranslate">Shader</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">O Fragment <span class="notranslate">Shader</span> é o estágio de <span class="notranslate">sombreamento</span> programável no pipeline de renderização que lida com &quot;fragmentos&quot; - os pixels interpolados usados para texturizar qualquer polígono - e eles são responsáveis pela saída da cor final de cada pixel
      renderizado em triângulo pixel. Basicamente, funciona assim: o Fragment <span class="notranslate">Shader</span> recebe como entrada todos aqueles fragmentos (os pixels individuais do triângulo que está sendo renderizado) que foram passados ao longo da tubulação pelo Vertex <span class="notranslate">Shader</span>. Ele pode então
      processar estes fragmentos para mudar a cor e o alfa do pixel de destino final que será atraído para a tela.</p>
  </div>
  <p> </p>
  <p>Uma visão completa de como <span class="notranslate">os shaders</span> realmente funcionam e que lugar eles têm no pipeline gráfico está fora do escopo disto, mas você pode encontrar um guia brilhante aqui:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Guia para o uso de <span class="notranslate">Shaders</span></a></li>
  </ul>
  <p> </p>
  <p>E há uma série de artigos no blog <span class="notranslate">YoYo Games</span> Tech que entram em muito mais detalhes, que você pode acessar através dos links a seguir:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="https://www.yoyogames.com/blog/14/shaders-overview-part-1"><span class="notranslate">Shaders</span> Parte 1</a></li>
    <li><a href="https://www.yoyogames.com/blog/16/shaders-overview-part-2"><span class="notranslate">Shaders</span> Parte 2</a></li>
    <li><a href="https://www.yoyogames.com/blog/17/shaders-overview-part-3"><span class="notranslate">Shaders</span> Parte 3</a></li>
    <li><a href="https://www.yoyogames.com/blog/18/shaders-overview-part-4"><span class="notranslate">Shaders</span> Parte 4</a></li>
  </ul>
  <p> </p>
  <p>O<span class="notranslate">GameMaker Studio 2</span> suporta os seguintes idiomas de <span class="notranslate">sombreamento</span>:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Linguagem<span class="notranslate">Shader</span> </th>
        <th>Plataforma Alvo</th>
      </tr>
      <tr>
        <td><strong>GLSL ES</strong></td>
        <td>Todas as plataformas alvo</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac e <span class="notranslate">Ubuntu</span><span class="notranslate">(Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td><span class="notranslate">Windows</span>, UWP, XboxOne</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td><span class="notranslate">Playstation 4</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Para criar um recurso <span class="notranslate">Shader</span>, basta clicar com o botão direito do mouse <img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png"> no <a href="../Introduction/The_Asset_Browser.htm">Navegador de Ativos</a> e selecionar <em>Criar <span class="notranslate">Shader</span></em>. Uma vez que você tenha criado
    o <span class="notranslate">shader</span> base, você pode então usar o menu <img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png"> direito do mouse sobre o novo recurso para selecionar o tipo de <span class="notranslate">shader</span> antes de continuar a editar o código:</p>
  <p><img alt="Shader Editor RMB Menu" class="center" src="../assets/Images/Asset_Editors/Editor_Shader_RMBMenu.png">O próprio editor de código é dividido em dois &quot;programas&quot; - Vertex e Fragment - quando você cria um novo shader, sendo <span class="notranslate">que</span> cada um deles
    disponível nas abas no topo do editor. Ambas são criadas de uma só vez porque <em>não</em> se <em>pode criar um <span class="notranslate">sombreador</span></em> sem as duas partes. Mesmo que você deseje usar apenas o <span class="notranslate">shader</span> fragmento, você terá que ter criado um vértice &quot;pass through
   <span class="notranslate">shader</span> em primeiro lugar, e é por isso que, por padrão, qualquer <span class="notranslate">shader</span> novo a ser criado terá um vértice e fragmento de passagem através do <span class="notranslate">shader</span> já codificado para você (na tela capturada no topo da página, você pode ver que usamos a visualização do painel do editor de código para mostrar
    os dois lado a lado... útil quando se trabalha nos dois programas de <span class="notranslate">sombreamento</span> juntos).</p>
  <p>Vale notar que você pode usar <span class="notranslate">os shaders</span> GLSL ES em <em>todas as </em>plataformas alvo, mas para que eles funcionem na plataforma alvo <strong>HTML5 </strong>você deve ter habilitado o WebGL nas <a href="../Settings/Game_Options/HTML5.htm">Opções de Jogo HTML5</a>, caso contrário
    eles não funcionarão.</p>
  <p>Para mais detalhes relacionados às funções de <span class="notranslate">sombreamento</span> e como elas podem ser usadas no <span class="notranslate">GameMaker Studio 2</span>, consulte as páginas seguintes:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm"><span class="notranslate">Shader</span></a> Functions - A seção de referência <span class="notranslate">GML</span> para <span class="notranslate">shaders</span>.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Constantes de<span class="notranslate">Shader</span></a> - As constantes incorporadas ao <span class="notranslate">GameMaker Studio 2</span> que podem ser usadas ao escrever <span class="notranslate">shaders</span>.</li>
    <li><a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf">Especificações GLSL ES</a> - arquivo PDF das especificações da linguagem Open GL ES <span class="notranslate">Shader</span> que o <span class="notranslate">GameMaker Studio 2</span> utiliza.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL Language Reference</a> - As páginas de referência da Microsoft para o uso do HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">Apresentação do idioma PSSL</a> - Visão geral do idioma PSSL em formato de apresentação.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="The_Asset_Editors.htm">Os Editores de Ativos</a></div>
        <div style="float:right">A seguir: <a href="Sounds.htm">Sons</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
The <span class="notranslate">Shader</span> Editor
<span class="notranslate">Shaders</span>
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
<span class="notranslate">shader</span>_editor
-->

</body></html>