<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guia de Primitivos e Construção de Vértices</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guia de Primitivos e Construção de Vértices</h1>
  <p>Este guia aborda brevemente como construir e usar <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">primitivos</a> usando <strong>formatos de vértices</strong> e <strong>amortecedores de vértices</strong> personalizados. </p>
  <p>Em geral, quando você começa a trabalhar com 3D, efeitos especiais, processos de desenho complexos ou <span class="notranslate">shaders</span>, você não precisa se preocupar muito com o formato de vértice que está sendo usado, uma vez que o GameMaker <span class="notranslate">Studio 2</span> irá automaticamente configurar e passar através dos dados do vértice para você. Entretanto, às vezes é necessário criar seus próprios dados de vértices e formatá-los para adequá-los, especialmente quando você precisa aumentar a velocidade, ou deseja passar informações extras. Por exemplo, o padrão
    O formato do vértice inclui uma posição x, y, z 3D, cor (com alfa) e coordenadas de textura UV, que, se você mesmo estivesse criando, se pareceria com algo parecido:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vértice_format_end();</p>
  <p>Entretanto, se você estiver usando apenas (por exemplo) um <span class="notranslate">sombreador</span> para manipular a posição do vértice, então não haveria necessidade de passar pelos dados de cor ou textura. Neste caso, você criaria seu próprio formato como tal:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> my_format = vértice_format_end();</p>
  <p>No total, há cinco atributos de vértices diferentes que você pode usar ao definir um formato de vértice:</p>
  <ul class="colour">
    <li>Cor</li>
    <li>Normal</li>
    <li>Posição</li>
    <li>Posição 3D</li>
    <li>Coordenação da textura</li>
  </ul>
  <p>Em geral, você deve <em>sempre</em> fornecer posição ou posição 3D como parte do formato, mas todas as outras são opcionais.</p>
  <p>Você deve observar que, uma vez criado seu formato de vértice, a ordem na qual você definiu os atributos do vértice <i>deve ser honrada</i> ao construir seus <strong>primitivos</strong>. Portanto, se você definiu um formato de vértice como posição, cor,
    e coordenadas de textura, então <b>você <i>deve</i></b> adicionar estes atributos ao primitivo na mesma ordem, caso contrário, você receberá um erro. Observe também que, como qualquer outro recurso dinâmico, um formato de vértice requer memória e, portanto, deve ser removido.
    quando não for necessário usar a função <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><tt>vértice_format_delete()</tt></a>.</p>
  <p>Quaisquer primitivos que você constrói são mantidos em um <b>tampão de vértice</b>. Este deve ser criado de antemão e depois referenciado pelas funções que são usadas para construir seu primitivo. O buffer de vértices pode ser reutilizado tantas vezes quantas forem necessárias para criar diferentes
    primitivos, ou pode ser &quot;congelado&quot; para manter um tipo primitivo específico para a duração de seu jogo ou nível (que é a abordagem mais rápida, portanto, se você sabe que um primitivo que você constrói não mudará, então você deve sempre usar esta opção).</p>
  <p>Um exemplo de um único triângulo primitivo sendo construído é mostrado no seguinte código:</p>
  <p class="code">// CREATE EVENT<br> v_buff = vertex_create_buffer();<br> vertex_begin(v_buff, global.my_format);<br> vertex_position(v_buff, 10, 10);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 0, 0);<br> vertex_position(v_buff, 110, 10);<br> vertex_colour(v_buff, c_white, 1); <br> vertex_texcoord(v_buff, 1, 0);<br> vertex_position(v_buff, 110, 110);<br> vertex_colour(v_buff, c_white, 1);<br> vertex_texcoord(v_buff, 1, 1);<br> vertex_end(v_buff);
    <br>
    <br> // DRAW EVENT<br> var tex = sprite_get_texture(spr_Background, 0);<br> <span class="notranslate">shader_set</span>(shd_shimmer);
    <br> vertex_submit(v_buff, pr_trianglelist, tex);<br> <span class="notranslate">shader_reset</span>();
  </p>
  <p>Aqui criamos primeiro nosso buffer de vértices no Create Event of the instance, depois começamos a definição dos diferentes vértices que compõem nosso triângulo primitivo, dando a posição, a cor e a textura UV coordenada para cada um dos
    três pontos que queremos utilizar. Terminamos então a definição do vértice, e sabemos que o buffer do vértice com estes dados do vértice é armazenado na variável &quot;v_buff&quot;.  </p>
  <p class="note"><strong>NOTA</strong>: Se o conteúdo do buffer fosse atualizado constantemente, o buffer seria criado, dados os dados do vértice, e depois seria destruído novamente - após ter sido desenhado - tudo na mesma etapa.</p>
  <p>Em seguida, desenhamos o conteúdo do buffer de vértices no Evento de Sorteio usando um <span class="notranslate">shader</span>. Este é um exemplo muito simples, e é basicamente como o <span class="notranslate">GameMaker Studio 2</span> funciona internamente, ou seja: quando você desenha um duende, o <span class="notranslate">GameMaker</span> cria um buffer de vértices com quatro vértices
    criando dois triângulos (que fazem um quadrado, também chamado &quot;quad&quot;), e texturizam esses dois triângulos com a imagem do duende. Quando desenhamos este duende, estamos apresentando o buffer de vértices e seu conteúdo é desenhado para a tela.</p>
  <p>Você notará quando submetemos o tampão de vértice para desenho, nós fornecemos um tipo primitivo. O tipo de primitivo que você usa pode ser um ponto, uma lista de linhas ou faixa, ou uma lista ou faixa triangular, mas <i>não</i> são permitidos ventiladores triangulares, uma vez que a maioria dos móveis
    não aceitará esse tipo primitivo de hardware. Não se esqueça de formatar corretamente seu buffer de vértices para o tipo de primitivo que será usado para desenhá-lo. Por exemplo, desenhar um triângulo primitivo de dois triângulos como uma lista triangular requer 6 pontos,
    mas como uma faixa triangular requer apenas 4 pontos. O tipo que você usa depende de você e dependerá do que você está querendo desenhar e do efeito que você quer alcançar.</p>
  <p>Um último ponto importante a ser observado ao utilizar seus próprios amortecedores de vértices desta forma é como isso afeta os lotes de vértices que são enviados para a GPU. Quando você cria um buffer de vértices, você está criando o nível mais baixo de dados gráficos, portanto, quando você desenha todos
    que acontece é que o <span class="notranslate">GameMaker Studio 2</span> envia seu buffer diretamente para a placa gráfica. Por causa disso, se você quiser um batching melhor, você mesmo deve resolver isso e armazenar as coisas que você deseja batch dentro do mesmo buffer.</p>
  <p>Como já mencionamos acima, os formatos de vértices são construídos usando juntos os 5 tipos de atributos seguintes (adicionados através da função adequada de <tt>vértice_formato_add_*</tt> ):</p>
  <ul class="colour">
    <li>Cor</li>
    <li>Normal</li>
    <li>Posição</li>
    <li>Posição 3D</li>
    <li>Coordenação da textura</li>
  </ul>
  <p>Dentro do <span class="notranslate">sombreador</span> GLSL ES, estes tipos são reconhecidos utilizando os 4 atributos seguintes:</p>
  <ul class="colour">
    <li>Cor</li>
    <li>Normal</li>
    <li>Posição</li>
    <li>Coordenação da textura</li>
  </ul>
  <p>Agora, isto pode parecer estranho, pois parece que podemos especificar mais tipos de atributos em nosso formato de vértice do que podemos no <span class="notranslate">sombreador de</span> vértices. Entretanto, no <span class="notranslate">shader</span> <i>Position</i> e no <i>3D Position</i> são tratados como o <em>mesmo </em>atributo, exceto que
    Espera-se que a <i>posição</i> tenha apenas as coordenadas &quot;x&quot; e &quot;y&quot;, enquanto a posição 3D tem as coordenadas &quot;x <i>&quot;, &quot;y</i> &quot; e &quot;z&quot;. Então, como você mapeia o que está em seu formato de vértice para como você define atributos em seu shader <span class="notranslate">?</span> Vamos
    começar olhando para um conjunto típico de atributos do <span class="notranslate">sombreador</span> padrão:</p>
  <p> </p>
  <p class="code">atributo vec3 in_Position; // (x,y,z)<br> // atributo vec3 in_Normal; // (x,y,z) não utilizado neste <span class="notranslate">shader</span>.<br> atributo vec4 in_Colour; // (r,g,b,a)<br> atributo vec2 in_TextureCoord; // (u,v)</p>
  <p>E aqui está um pedaço de código que estabelece um formato de vértice compatível com este sombreador <span class="notranslate">:</span></p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vértice_format_end();</p>
  <p>Agora, como o atributo de <span class="notranslate">sombreamento</span> se iguala ao tipo de formato de vértice? É apenas baseado na convenção de nomenclatura:</p>
  <ul class="colour">
    <li>mapas &quot;in_Position&quot; para vertex_format_add_position <tt>/ _3d()</tt></li>
    <li><tt>mapas &quot;in_Colour&quot; para vertex_format_add_colour <tt>()</tt></tt>
    </li>
    <li><tt><tt>mapas &quot;in_TextureCoord&quot; para vertex_format_add_textcoord <tt>()</tt></tt>
      </tt>
    </li>
  </ul>
  <p><tt><tt><tt></tt></tt>
    </tt>Agora, as coisas ficam mais complicadas quando você tem vários atributos do mesmo tipo, mas as coisas ainda se baseiam na mesma convenção de nomes. <b>Agora</b> vamos procurar fornecer <b>coordenadas</b> adicionais <b>de</b> <b>cor e</b> <b>textura</b>, pois só pode haver uma Posição e um atributo Normal no formato sombreado <span class="notranslate">ou</span> vértice, mas pode <em>haver</em> múltiplos atributos de cor ou textura.</p>
  <p>Ao adicionar atributos de cor adicionais a seu <span class="notranslate">shader</span>, um número precisa ser adicionado ao final do atributo <span class="notranslate">shader</span> para indicar a qual entrada específica no formato de vértice o atributo mapeia. Aqui está um exemplo - primeiro o formato do vértice:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> my_format = vértice_format_end();</p>
  <p>E agora os atributos de <span class="notranslate">sombreamento</span> associados:</p>
  <p class="code">atributo vec3 in_Position; // (x,y,z)<br> atributo vec4 in_Colour0; // (r,g,b,a)<br> atributo vec4 in_Colour1; // (r,g,b,a)<br> atributo vec2 in_TextureCoord; // (u,v)</p>
  <p>Neste caso, os mapas <tt>in_Colour0</tt> para o primeiro <tt>vertex_format_add_colour()</tt> e <tt>in_Colour1</tt> para o segundo.</p>
  <p>As coordenadas da textura são tratadas de forma ligeiramente diferente da cor. Basicamente, qualquer coisa que não seja chamada de in_Position <tt>, in_Normal</tt> <tt>ou</tt> um dos atributos in_Colour <tt>[0 ...]</tt> é tratada como uma coordenada de textura. A ordem em que eles
    são definidos, na lista de atributos no <span class="notranslate">sombreador</span>, é o que denota qual atributo no formato de vértice a que eles mapeiam. Veja o exemplo <span class="notranslate">GML</span> a seguir:</p>
  <p class="code">vertex_format_begin();<br> vertex_format_add_position_3d();
    <br> vertex_format_add_colour();
    <br> vertex_format_add_textcoord();
    <br> vértice_format_add_textcoord();
    <br> vértice_format_add_textcoord();
    <br> my_format = vértice_format_end();</p>
  <p>E o código de <span class="notranslate">sombreamento</span> ficaria algo parecido com isto:</p>
  <p class="code">atributo vec3 in_Position; // (x,y,z)<br> atributo vec4 in_Colour; // (r,g,b,a)<br> atributo vec2 in_myTexcoord; // (u,v)<br> atributo vec2 in_TextureCoord; // (u,v)<br> atributo vec2 in_Something; // (u,v)</p>
  <p>Neste exemplo, <tt>in_myTexcoord</tt>, <tt>in_TextureCoord</tt> e <tt>in_Something</tt> map para os três atributos sucessivos de coordenadas de textura definidos no formato de vértice.</p>
  <p>Você pode encontrar uma lista completa de todas as funções necessárias para criar formatos de vértices, amortecedores de vértices e primitivos na página seguinte:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitivos e formatos de vértices</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="Additional_Information.htm">Informações adicionais</a></div>
        <div style="float:right">A seguir: <a href="Guide_To_Using_Blendmodes.htm">Guia para a utilização de emendas</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->

</body></html>