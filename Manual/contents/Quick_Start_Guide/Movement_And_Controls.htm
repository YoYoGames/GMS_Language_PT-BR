<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Movimento e controles</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code and DnD to show people how to move things around within a game." />
  <meta name="rh-index-keywords" content="Quick Start - Movement And Controls" />
  <meta name="search-keywords" content="movement,controls" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Movimento e controles</h1>
  <p>A <a href="Drawing.htm">seção anterior</a> deste Guia Rápido deu alguns exemplos para desenhar coisas para a tela, mas apenas desenhar coisas não é muito bom se você não puder movê-las também... então nesta seção nós estaremos dando
    você alguns exemplos de movimento para seus objetos, bem como alguns esquemas básicos de controle para diferentes tipos de jogos. Todos os exemplos são dados usando <span class="notranslate">Drag e Drop™</span><span class="notranslate">(DnD™</span>), assim como a <span class="notranslate">linguagem GameMaker</span><span class="notranslate">(GML</span>), para que você possa usar o que mais lhe apetecer
    confortável com. Note que não vamos explicar as coisas com muita profundidade aqui, pois queremos que você comece a fazer as coisas o mais rápido possível, por isso encorajamos você a explorar quaisquer links à medida que for avançando e a usar a função &quot;procurar&quot;.
    do manual para procurar informações adicionais sobre qualquer coisa que você não esteja certo.</p>
  <p>Antes de continuar, você pode querer fazer um novo projeto ( <span class="notranslate">GML</span> ou <span class="notranslate">DnD™</span>) a partir da <a href="../Introduction/The_Start_Page.htm">página inicial</a>, e adicionar (ou criar) alguns sprites, bem como um ou dois objetos - já que lhe daremos alguns
    código que você pode testar usando estes - e certifique-se de que o projeto tem um espaço para colocar instâncias. Não se preocupe muito com a aparência dos sprites que você faz, como até mesmo um simples quadrado branco fará, e uma vez que você tenha tudo pronto
    você pode começar a trabalhar com os exemplos listados abaixo.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">Mova-se em direção ao Rato</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Uma das maneiras mais simples de fazer um objeto se mover e interagir com o jogador é usar o mouse, e neste exemplo mostraremos como usar algum código básico para fazer um objeto se mover para onde o usuário tiver clicado o botão esquerdo do mouse
      <img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png"> .</p>
    <p class="dropspot">Para começar, abrir um objeto, atribuir-lhe um duende e, em seguida, dar-lhe um <strong>evento Global Left Mouse Down</strong>:</p>
    <p class="dropspot"><img alt="Adding The Mouse Left Button Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_GlobalLMBDownEvent.png" /></p>
    <p class="dropspot">Usamos os eventos <strong>globais </strong>do mouse porque eles detectam um clique em qualquer lugar da sala, enquanto os eventos regulares do mouse só detectarão um clique se o mouse realmente clicar dentro da <a class="glossterm" data-glossterm="caixa de delimitação" href="#">caixa de delimitação da</a> instância. Neste evento, queremos adicionar este <span class="notranslate">DnD™</span>ou <span class="notranslate">GML</span>:</p>
    <p class="dropspot"><img alt="DnD To Move Instance Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_1.png" /></p>
    <p class="code">move_towards_point(mouse_x, mouse_y, 2);</p>
    <p class="dropspot">Aqui estamos dizendo à instância para avançar em direção a uma posição na tela, neste caso a posição &quot;<span class="inline">mouse_x</span>&quot; e &quot;<span class="inline">mouse_y</span>&quot; (&quot;<span class="inline">mouse_x</span>&quot;).
      e &quot;<span class="inline">mouse_y</span>&quot; são <strong>variáveis </strong> embutidas <a class="glossterm" data-glossterm="variável" href="#">que</a>sempre seguram a posição atual do cursor do mouse). O <span class="notranslate">DnD™</span>
      faz isso através da configuração do &quot;<span class="inline">direction</span>&quot; e &quot; <span class="inline">speed</span>&quot;. <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/Instance_Variables.htm"><strong>Variáveis de instância</strong></a>,
      enquanto o <span class="notranslate">GML</span> faz isso usando a função <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_towards_point.htm"><span class="inline">move_towards_point()</span></a> (isto também define o <span class="inline">speed </span>e
      <span class="inline">direction </span> variáveis, apenas em uma função única e fácil de usar).</p>
    <p class="dropspot">Coloque uma instância deste objeto em uma sala e depois aperte o botão Play <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">, depois clique em <img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png"> ao redor
      o espaço para que a instância se mova em direção ao mouse:</p>
    <p class="dropspot"><img alt="Animation Of Instance Moving Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_1.gif">Ótimo! A instância do objeto agora se move para onde você clicou, e se você segurar o botão, a instância
      continuará apenas seguindo o cursor do mouse. No entanto, há um problema... Depois de clicar uma vez e soltar, a instância continuará em movimento e eventualmente sairá da sala! Há uma série de maneiras de consertar isso, e qual você escolhe
      dependerá do que você quer fazer, mas a solução mais fácil por enquanto é simplesmente adicionar um evento <strong>Global Mouse Button Released</strong>, então adicione isso agora ao objeto e dê a ele este código:</p>
    <p class="dropspot"><img alt="DnD To Set The Instance Speed" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_2.png" /></p>
    <p class="code">velocidade = 0;</p>
    <p class="dropspot">Com isso, a instância só seguirá o cursor do mouse enquanto o botão do mouse estiver pressionado, e quando você soltar o botão, ele parará de se mover. Pressione Play <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> e teste-o agora.</p>
    <p class="dropspot">Antes de deixarmos este exemplo, há uma última questão que precisamos resolver... Se você clicar e <em>segurar </em>o botão do mouse, mas não mover o cursor, então a instância se moverá em direção ao cursor e então &quot;vibrará&quot; em torno dele.
      Isto porque a instância está se movendo mais rápido do que 1 pixel de cada vez e por isso &quot;sobre-ataca&quot; a posição e depois tenta se mover para trás, e depois sobre-ataca novamente, etc... (faça a velocidade de movimento 5 ou algo parecido para ver a questão se
      não é imediatamente óbvio).</p>
    <p class="dropspot"><img alt="Animation Showing Instance Vibrating" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_2.gif">Para resolver isto, precisamos adicionar um <strong>Evento de Etapa</strong> ao objeto com este código:</p>
    <p class="dropspot"><img alt="DnD Actions For The Step Event" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_3.png" /></p>
    <p class="code">var _dist = point_distance(x, y, mouse_x, mouse_y);<br> if _dist &lt;= speed<br> {<br> speed = 0;<br> }</p>
    <p class="dropspot">Aqui apenas verificamos a distância da instância até a posição do mouse, e se for igual ou menor que a velocidade atual, ajustamos a velocidade para 0.
      não temos aquela desagradável questão de &quot;vibração&quot;.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">Movimento de 4 e 8 vias com o Teclado</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot"><a href="What_Is_Programming_.htm">Logo no início deste guia</a>, mostramos o seguinte <span class="notranslate">DnD™</span>e o código <span class="notranslate">GML</span> para mover uma instância para a direita por dois pixels a cada passo do jogo:</p>
    <p class="dropspot"><img alt="DnD Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
    <p class="code">x = x + 2;</p>
    <p class="dropspot">Este tipo de movimento é chamado movimento <strong>posicional </strong>, pois estamos essencialmente pegando a instância e colocando-a novamente em uma nova posição toda vez que o código é executado. O que vamos fazer neste exemplo é mostrar-lhe como
      para usar este tipo de movimento para mover uma instância em 4 direções: para cima, para baixo, esquerda e direita.</p>
    <p class="dropspot">Para começar, abra um objeto e atribua-lhe um duende. Agora, poderíamos acrescentar em vários <strong>Eventos de Teclado</strong> neste ponto, e em cada um deles ter a instância movimentar-se na direção desejada, no entanto, queremos apenas que o jogador possa mover
      em uma direção de cada vez e fazer isso apenas com os eventos do teclado é um pouco mais complicado do que fazer isso usando código. Em vez disso, vamos usar o Step <strong>Event -</strong> que você deve adicionar agora ao objeto - com o seguinte
     <span class="notranslate">DnD™</span>ou <span class="notranslate">GML</span> para usar as Setas para se mover:</p>
    <p class="dropspot"><img alt="DnD Step Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_1.png" /></p>
    <p class="code">if keyboard_check(vk_left)<br> {<br> x = x - 2;<br> } <br> else if keyboard_check(vk_right)<br> {<br> x = x + 2;<br> } <br> ou se teclado_check(vk_up)<br> {<br> y = y - 2;<br> } <br> caso contrário, se teclado_check(vk_down)<br> {<br> y = y - 2;<br> }</p>
    <p class="dropspot">Estamos usando uma estrutura &quot; <span class="inline">if... else if... else if...</span>&quot; para garantir que a instância só se moverá em uma direção de cada vez, e assim a instância só deverá ser capaz de mover-se para cima, para baixo, para a esquerda ou para a direita, mas não
      diagonalmente. Coloque uma instância do objeto em uma sala e pressione o botão <strong>Play </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> para testá-lo agora! Se tudo tiver corrido corretamente, você deve ter algo
      assim:</p>
    <p class="dropspot"><img alt="Animation Showing 4-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_1.gif" /></p>
    <p class="dropspot">Podemos modificar este código para converter o movimento de 4 vias em 8 vias facilmente também... basta remover os comandos &quot; <span class="inline">else</span>&quot; dos blocos de código para que tudo se pareça com isto:</p>
    <p class="dropspot"><img alt="DnD Step Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_2.png" /></p>
    <p class="code">if keyboard_check(vk_left)<br> {<br> x = x - 2;<br> } <br> if keyboard_check(vk_right)<br> {<br> x = x + 2;<br> } <br> if keyboard_check(vk_up)<br> {<br> y = y - 2;<br> } <br> if keyboard_check(vk_down)<br> {<br> y = y - 2;<br> }</p>
    <p class="dropspot">Agora, quando você apertar o botão <strong>Play (Reproduzir) </strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">, ele se parecerá com algo assim:</p>
    <p class="dropspot"><img alt="Animation Showing 8-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_2.gif" /></p>
    <p class="dropspot">Uma última coisa que vale a pena notar para os usuários que codificam com GML <span class="notranslate">.</span> Ao usar o <span class="notranslate">DnD™</span>você pode selecionar a tecla do teclado que deseja usar a partir de uma lista suspensa, mas com o <span class="notranslate">GML</span> não é tão simples assim. Há uma série de <a href="../GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm">Constantes de Teclado</a> que
      você pode usar - como as constantes das teclas de seta mostradas no código acima - mas <em>não </em>há constantes para as teclas alfanuméricas. Estas são tratadas de forma ligeiramente diferente, e exigem que você use a função <a href="../GameMaker_Language/GML_Reference/Strings/ord.htm"><span class="inline">ord()</span></a>.
      O código abaixo mostra como isto funcionaria usando WASD em vez das setas do teclado:</p>
    <p class="code">if keyboard_check(ord(&quot;A&quot;))<br> {<br> x = x - 2;<br> } <br> if keyboard_check(ord(&quot;D&quot;))<br> {<br> x = x + 2;<br> } <br> if keyboard_check(ord(&quot;W&quot;))<br> {<br> y = y - 2;<br> } <br> if keyboard_check(ord(&quot;S&quot;))<br> {<br> y = y - 2;<br> }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">Movimento Gamepad</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Nós cobrimos o movimento do mouse e do teclado, o que significa que é hora de cobrir o <strong>movimento do </strong>gamepad. Agora, não vamos cobrir o d-pad, pois isso realmente funciona exatamente como usar o teclado (basta mudar o teclado
      funções no exemplo acima para <a href="../GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm"><span class="inline">gamepad_button_check()</span></a> ou <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/If_Gamepad_Button_Down.htm">se o botão Gamepad estiver desligado</a>),
      Portanto, neste exemplo, vamos analisar a utilização do bastão analógico para o movimento.</p>
    <p class="dropspot">Para começar, precisamos detectar o gamepad que está sendo usado. Os gamepads recebem um valor de ID de 0 a 11, então usaremos um laço &quot; <span class="inline">for</span>&quot; para detectar a ID de qualquer gamepad conectado e armazenar este valor de ID em uma variável
      para uso futuro. Uma vez que desejamos apenas setear o primeiro gamepad que está conectado e não todos, usaremos o comando &quot; <span class="inline">break</span>&quot; após detectarmos um gamepad para que ele &quot;quebre&quot; o loop (para
      exemplo, se o primeiro gamepad conectado for ID 4, então o laço só funcionará 5 vezes, verificando os valores de ID 0 - 4 e depois saindo do laço quando o gamepad for encontrado). Então, faça (ou abra) um objeto, atribua-lhe um sprite, e então acrescente
      um <strong>Create Event</strong> com o seguinte:</p>
    <p class="dropspot"><img alt="Getting Gamepad ID Using DnD" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_3_1.png" /></p>
    <p class="code">gamepad_id = -1;<br> for (var i = 0; i &lt; 12; i += 1;)<br> {<br> if gamepad_is_connected(i)<br> {<br> gamepad_id = i;<br> gamepad_set_axis_deadzone(gamepad_id, 0.2);<br> break;<br> } <br> }
    </p>
    <p class="dropspot">Note que no código acima estabelecemos o <strong> <a class="glossterm" data-glossterm="deadzone" href="#">deadzone</a> </strong>para o gamepad. Isto porque os bastões analógicos em diferentes marcas de tapetes de jogo terão uma sensibilidade diferente, e às vezes
      eles podem ser tão sensíveis que, se você não definir uma zona morta, eles podem causar movimentos indesejados em seus jogos. Portanto, definimos a zona morta com um valor como 0,2 para dizer ao <span class="notranslate">GameMaker Studio 2</span> para ignorar qualquer valor de game stick abaixo desse valor <a class="glossterm" data-glossterm="absoluto" href="#">absoluto</a>.</p>
    <p class="dropspot">Para adicionar o movimento real, precisaremos de um <strong>Evento</strong> Passo <strong>, então</strong> adicione isso agora e dê o seguinte <span class="notranslate">DnD™</span>ou GML:</p>
    <p class="dropspot"><img alt="Get Gamepad Input Using DnD" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_3_2.png" /></p>
    <p class="code">se gamepad_id &gt; -1<br> {<br> var _h = gamepad_axis_value(gamepad_id, gp_axislh);<br> var _v = gamepad_axis_value(gamepad_id, gp_axislv);<br> x += _h * 4;<br> y += _v * 4;<br> }</p>
    <p class="dropspot">Aqui estamos verificando o bastão <em>esquerdo </em>para movimento horizontal ou vertical. As funções do eixo retornam um valor entre -1 e 1, então para o eixo horizontal -1 é esquerda, 0 não está se movendo e 1 é direita, e para o eixo vertical é -1 para
      para cima, 0 para não se mover e 1 para baixo. Observe também que os valores estão <em>entre </em>-1 e 1, portanto - por exemplo - o eixo horizontal poderia retornar um valor de 0,5, o que significa que o bastão está a meio caminho entre a posição de &quot;descanso&quot; e totalmente empurrado
      à direita. Por esta razão, multiplicamos então o valor por 4 (você pode multiplicar por qualquer valor realmente, dependendo da velocidade que você quer que a instância se mova) - isso significa que a velocidade da instância variará dependendo de quanto de um movimento tem
      foi feito no eixo do bastão.</p>
    <p class="dropspot">Coloque uma instância deste objeto em uma sala e pressione o botão <strong>Play </strong><strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"></strong>e, em seguida, mova-se usando o bastão esquerdo de sua conexão
      gamepad. Você deveria ver algo como isto:</p>
    <p class="dropspot"><img alt="Animation Showing Gamepad Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_3_1.gif" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">Movimento Avançado de 8 Vias</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">Neste exemplo final, vamos revisitar nosso código de movimento de 8 vias e abordar um problema que ele tem, que é que o movimento diagonal é na verdade mais rápido que o movimento para cima/baixo/esquerda/direita. Isto é simplesmente porque ao mover-se em diagonal, você está se movendo
      ao longo da hipotenusa de um triângulo em ângulo recto criado pelos valores do movimento x/y:</p>
    <p class="dropspot"><img alt="Image Showing Why Diagonal Movement Is Faster" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_1.png" /></p>
    <p class="dropspot">Para tornar mais claro o que está acontecendo, vamos remover todo o texto e os sprites e simplesmente mostrar a mesma linha de movimento rodada 45° para que seja horizontal:</p>
    <p class="dropspot"><img alt="Simplified Image SHowing Diaginal Movement Is Faster" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_2.png" /></p>
    <p class="dropspot">Como você pode ver, a diferença é bastante óbvia, e se a instância se move mais de 1 ou 2 pixels por degrau, então se torna muito perceptível que o movimento diagonal é <em>muito </em>mais rápido! Então, como limitar isso? Há uma série de caminhos a seguir
      sobre isto, mas vamos nos concentrar em apenas uma delas, porque introduz algumas funções e conceitos que serão úteis para você mais tarde em seus jogos.</p>
    <p class="dropspot">Para lidar com isso, vamos ter que armazenar os valores de entrada das teclas pressionadas independentemente em<span class="glossextra">variáveis</span>, e então verificá-las e movê-las de acordo com
      à combinação de teclas que foram pressionadas. Portanto, para isto você precisará de um objeto com um duende designado, e você precisará dar-lhe um <strong>Evento</strong> Passo <strong>com</strong> o seguinte DnD™ <span class="notranslate">ou</span>GML:</p>
    <p class="dropspot"><img alt="DnD Step Event Actions To Define Movement Variables" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_4_1.png" /></p>
    <p class="note"><strong>NOTA</strong>: Dividimos o <span class="notranslate">DnD™</span>acima em duas colunas para facilitar a visualização, mas no editor <span class="notranslate">DnD™</span>, ele será colocado consecutivamente.</p>
    <p class="code">var _esquerda = teclado_check(vk_esquerda);<br> var _direita = teclado_check(vk_direita);<br> var _up = teclado_check(vk_up);<br> var _down = teclado_check(vk_down);<br> var _hspd = _direita - _esquerda;<br> var _vspd = _down - _up;</p>
    <p class="dropspot">Precisaremos acrescentar mais algum código para realmente nos movermos, mas antes disso, vamos apenas explicar um pouco. Queremos converter esquerda/direita/cima/baixo em valores de velocidade horizontais e verticais equivalentes, de modo que estamos obtendo o valor de cada
      e depois fazer algumas contas básicas para obter os valores de velocidade. Isto funciona porque se uma tecla estiver sendo pressionada, então a ação ou função de verificação retornará &quot;1&quot;, e se não estiver sendo <em>pressionada, </em>então a função retornará
      0. Assim, se - por exemplo - a direita está sendo pressionada, você tem &quot;1 - 0 = 1&quot; para o &quot; <span class="inline">_hspd</span>&quot;, e se a esquerda está sendo pressionada, você tem &quot;0 - 1 = -1&quot; para o &quot; <span class="inline">_hspd</span>&quot;.
      (e se ambos forem pressionados, então é &quot;1 - 1 = 0&quot;, então a instância não se moverá). Lembre-se, em uma sala <span class="notranslate">GameMaker Studio 2</span>, para mover para a direita adicionamos à posição <span class="inline">x </span>e para mover para a esquerda subtraímos, então isto
      nos dará um valor positivo ou negativo que podemos adicionar ou subtrair para nos movermos horizontal ou verticalmente, dependendo da entrada do teclado.</p>
    <p class="dropspot">Agora podemos adicionar o código que realmente move a instância, então - ainda no <strong>Step Event</strong>, e após o código acima - adicione isto:</p>
    <p class="dropspot"><img alt="DnD Step Event Actions To Move The Instance" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_4_2.png" /></p>
    <p class="code">if (_hspd != 0 || _vspd != 0)<br> {<br> var _spd = 4;<br> var _dir = point_direction(0, 0, _hspd, _yspd);<br> var _xadd = lengthdir_x(_spd, _dir);<br> var _yadd = lengthdir_y(_spd, _dir);<br> x = x + _xadd;<br> y
      = y + _yadd;<br> }</p>
    <p class="dropspot">O código acima verifica primeiro se uma de duas<span class="glossextra">expressões</span> é verdadeira, ou seja: se as variáveis de velocidade horizontal ou vertical não são 0. Observe como o &quot;
      <span class="inline">if</span> &quot; verificação GML usa o símbolo &quot; <span class="inline">||</span>&quot;. Isto significa &quot; <span class="inline">or</span>&quot; ao programar, portanto - em linguagem simples - você está verificando</p>
    <p class="code">se a variável _hspd não for igual a zero <strong>ou </strong>se a variável _vspd não for igual a zero</p>
    <p class="dropspot">Você pode juntar várias expressões em &quot; <span class="inline">if</span>&quot;, e há várias maneiras diferentes de avaliar essas expressões (para mais informações, consulte a seção sobre Expressões <strong>aqui</strong> ).</p>
    <p class="dropspot">A seção seguinte do código armazena um valor para a velocidade real do movimento em uma variável e depois recebe uma direção usando os valores <span class="inline">_hspd </span>e <span class="inline">_vspd </span>, que podem ser -1, 0, ou 1. A função de direção
      cheques a partir de (0, 0), pois não estamos usando coordenadas de sala e, em vez disso, queremos que ela seja avaliada como uma direção de 0° a 360° com base nos valores variáveis. O diagrama a seguir ilustra melhor o que está acontecendo do que tentar explicá-lo em
      palavras:</p>
    <p class="dropspot"><img alt="Example Image Showing Direction Around (0,0) Origin" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_3.png" /></p>
    <p class="note"><strong>NOTA</strong>: A direção no <span class="notranslate">GameMaker Studio 2</span> é calculada no <strong>sentido anti-horário</strong>, portanto 0° e 360° são para a direita, 90° é para cima, 180° é para a direita e 270° é para baixo.</p>
    <p class="dropspot">Finalmente, usamos o <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"><span class="inline">lengthdir_x()</span></a> e <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"><span class="inline">lengthdir_y()</span></a> funções
      para realmente mover a variável. Estes são <strong> <a class="glossterm" data-glossterm="vetor" href="#">vetor</a>  </strong>funções que tomam um comprimento (distância) e uma direção e depois calcular a nova posição no eixo dado com base nestas
      valores (ver as descrições das funções para uma explicação mais detalhada).</p>
    <p class="dropspot">Isso é muito para absorver de uma só vez, e não se preocupe se você não entender tudo isso! Com o tempo, você entenderá! Tudo o que falta fazer agora é adicionar uma instância deste objeto a uma sala, e depois pressionar o botão Play <strong> <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"></strong>,
      e você deve ter um movimento suave como seda de 8 vias sem nenhuma das questões relacionadas à movimentação em diagonal:</p>
    <p class="dropspot"><img alt="Animation Showing Improved 8-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_4_4.gif" /></p>
  </div>
  <p> </p>
  <p>Com estes exemplos - e os anteriores para o desenho - esperamos que você tenha um entendimento suficiente para começar a fazer seus próprios projetos! A última página deste Guia de Início Rápido contém um resumo de algumas das coisas que você aprendeu como
    bem como links para materiais de aprendizagem adicionais.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Voltar: <a href="../Content.htm">Índice</a></div>
        <div style="float:right">A seguir: <a href="Summary.htm">Sumário</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Todos os direitos reservados</span></h5>
  </div>
  <!-- KEYWORDS
Movement
Controls
Movement and Controls
Movement Examples
Controls Examples
-->
  <!-- TAGS
qs_movement_controls
-->

</body></html>