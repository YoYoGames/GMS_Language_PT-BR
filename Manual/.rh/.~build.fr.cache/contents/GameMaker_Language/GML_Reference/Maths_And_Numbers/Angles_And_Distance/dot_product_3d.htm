



  
  dot_product_3d
  O produto ponto é um valor que expressa a relação angular entre dois vetores e é encontrado pegando dois vetores, multiplicando-os juntos e depois adicionando os resultados. O nome "produto de ponto" é derivado do ponto centralizado "-".
    que é freqüentemente usado para designar esta operação (o nome alternativo "produto escalar" enfatiza a natureza escalar em vez de vetor do resultado).
  A fórmula matemática real pode ser escrita desta forma:
  
  Em 2D, o produto ponto de vetores a[x1,y1] e b[x2,y2] é x1x2 + y1y2, assim em 3D, o produto ponto de vetores a[x1,y1,z1] e b[x1,y1,z1] é x1x2 + y1y2 + z1z2. Portanto, o produto ponto_3d no GameMaker Studio 2 é calculado como:
  a - b = (x1*x2) + (y1*y2) + (z1*z2);
  O curioso sobre o produto ponto é a relação que ele tem com o ângulo formado pelos vetores de entrada que podem ser expressos como:
  a - b = (comprimento de a) * (comprimento de b) * cos(ângulo)
  Ou seja, o produto pontilhado de dois vetores será igual ao cosseno do ângulo entre esses vetores, multiplicado pelo comprimento de cada um deles. Aqui está uma imagem para ilustrar:
  
  NOTA: Para mais informações sobre vetores, veja aqui.
  Há algumas coisas que agora podemos afirmar a partir de quaisquer dois vetores em relação ao resultado de seu produto ponto:
  
    Se a e b forem perpendiculares (a 90 graus um ao outro), o resultado do produto ponto será zero, pois cos(ang) será zero
    Se o ângulo entre a e b for inferior a 90 graus, o produto ponto será positivo (maior que zero), pois cos(ang) será positivo
    Se o ângulo entre a e b for maior que 90 graus, o produto ponto será negativo (menos que zero), pois cos(ang) será negativo
  
  Então o que isso significa para aqueles de nós que fazem jogos? Bem, esta relação matemática pode ser usada em várias circunstâncias, mas a melhor maneira de vê-la é construir um cenário real e ver por si mesmo o que está acontecendo. Um dos mais simples
    As maneiras de fazer isso é gerar uma simples verificação de "altura" de um inimigo em, digamos, um jogo de plataforma para que o inimigo "veja" o jogador se ele estiver acima do plano formado pelo vetor normal do inimigo e pelo piso 3d.
  Basicamente, estamos obtendo o vetor normal do inimigo perpendicular ao chão e então estamos
    levando o vetor do jogador para o inimigo. Então obteremos o ponto_produto destes vetores, e se o resultado for positivo, o jogador está "acima" do plano do chão inimigo e se for negativo, ele está abaixo. O código real para fazer com que isto funcione
    é fornecido no exemplo abaixo.
   
  Sintaxe:
  dot_product_3d(x1, y1, z1, x2, y2, z2)
  
    
      
        Argumento
        Descrição
      
      
        x1
        A coordenada x do primeiro vetor.
      
      
        y1
        A coordenada y do primeiro vetor.
      
      
        z1
        A coordenada z do primeiro vetor.
      
      
        x2
        A coordenada x do segundo vetor.
      
      
        y2
        A coordenada y do segundo vetor.
      
      
        z2
        A coordenada z do segundo vetor.
      
    
  
   
  Devoluções:
  Real
   
  Exemplo:
  var x1, y1, x2, y2; x1 = 0; y1 = 1; z1 = 0; x2 = o_Player.x - x; y2 = o_Player.y - y; z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) > 0 acima=verdadeiro acima=falso;
  O código acima cria um vetor normal ao longo das instâncias do eixo y (para cima), e então obtém o vetor do objeto jogador "o_Player" para si mesmo. Finalmente, ele calcula o produto de ponto desses dois vetores e, se for maior bronze 0, define a variável
    "acima" para o verdadeiro, e se for menor ou igual a 0, o define como "falso".
   
   
   
  
    
      
        Voltar: Ângulos e distância
        Próximo: dot_product_normalised
      
    
    © Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

