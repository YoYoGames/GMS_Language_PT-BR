
  
  json_encode
  IMPORTANTE! Esta função - embora ainda válida - foi superada pela função json_stringify(), e recomendamos que você use esta função apenas para suporte de legado.
  JSON (JavaScript Object Notation) é um formato leve de troca de dados que é fácil de ler e escrever, tanto para pessoas quanto para máquinas. Ele é construído sobre duas estruturas básicas:
  
    Uma coleção de pares de nomes/valores, chamados de Mapa DS no GameMaker Studio 2, mas também conhecido como "dicionário" ou "objeto" em outras linguagens de programação.
    Uma lista ordenada de valores, chamada de DS Lista no GameMaker Studio 2, mas isto também pode ser chamado de "array" ou "seqüência" em outras linguagens de programação.
  
  json_encode() pega um mapa DS ou array que você criou anteriormente e codifica-o como uma string JSON que você pode então usar como (por exemplo) parte de um http_post_string()    chamada, ou - para que possa ser armazenada externamente - pode ser escrita em um arquivo. Se usar um array como estrutura de nível superior, então o array só pode conter valores válidos ou outros arrays, e não estruturas de dados. Para isso você deve usar o
    Funções do DS.
  IMPORTANTE! O JSON é agnóstico em relação aos números. Em qualquer linguagem de programação, pode haver uma variedade de tipos de números de várias capacidades e complementos, fixos ou flutuantes, binários ou decimais. Isso pode fazer com que haja intercâmbio entre diferentes
    linguagens de programação difíceis. O JSON, ao invés disso, oferece apenas a representação de números que os humanos usam: uma seqüência de dígitos. Todas as linguagens de programação sabem como fazer sentido das seqüências de dígitos, mesmo que discordem nas representações internas. Para
    Para mais informações, consulte a Norma ECMA JSON.
  Observe que deve-se ter cuidado ao escrever o JSON para um arquivo ini, pois as especificações ini podem causar problemas ao usar citações e caracteres de escape. Veja a função ini_write_string() para mais
    informação. Observe também que se você codificar uma int64 para o JSON, ele a escreverá como uma int se estiver na faixa válida para uma int32, como um duplo se puder fazê-lo sem perder precisão ou (se nenhum desses casos for aplicável) como uma string com um identificador " @i64@" antes dela e " $i64$" depois dela. Quando você vier decodificar o JSON para um mapa novamente, o GameMaker Studio 2 pegará esses identificadores e reconverterá o valor para uma int64. Isto significa que
    que se o JSON for destinado a um servidor ou algum outro alvo que não seja o GameMaker, esses valores não serão apropriados e, portanto, devem ser evitados.
  NOTA: A funcionalidade hierárquica do JSON está disponível através de funções especiais de mapa DS e lista DS (por exemplo, ds_map_add_list() ou
    ds_list_mark_as_map() ), para que você possa codificar sub-listas e mapas.
   
  Sintaxe:
  json_encode(mapa)
  
    
      
        Argumento
        Descrição
      
      
        mapa
        um mapa DS com as informações a serem codificadas (ou uma matriz)
      
    
  
   
  Devoluções:
  corda
   
  Exemplo:
  var hiscore_map, i, str; hiscore_map = ds_map_create(); for (i = 0; i < 10; i ++;) {
     ds_map_add(hiscore_map, name[i], score[i]); }
     str = json_encode(hiscore_map); get[0] = http_post_string("http://www.angusgames.com/game?game_id=" + string(global.game_id), str) ds_map_destroy(hiscore_map);
  
  O código acima cria um mapa DS e depois percorre as arrays de nome e pontuação, adicionando cada par chave/valor ao novo mapa. Em seguida, este mapa é codificado usando json_encode() e armazenado como uma string na variável "str". Esta string é
    então enviado a um servidor web usando http_post_string() e o mapa DS é destruído para evitar um vazamento de memória, pois não é mais necessário.
   
   
   
  
    
      
        Voltar: Codificação de arquivos
        Próximo: json_decode
      
    
    © Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

