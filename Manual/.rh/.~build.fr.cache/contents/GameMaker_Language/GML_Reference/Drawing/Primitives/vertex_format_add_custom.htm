
  
  vértice_formato_add_custom
  Esta função permite utilizar um tipo de dado personalizado para atributos específicos de formato de vértice como parte do novo formato de vértice que está sendo criado. Os valores disponíveis para uso são definidos pelo tipo de constante de dados que você escolher, listados abaixo:
   
  
    
      
        Constante
        Descrição
      
      
        vértice_type_float1
        Um único valor de ponto flutuante
      
      
        vértice_type_float2
        Dois valores de ponto flutuante
      
      
        vértice_type_float3
        Três valores de ponto flutuante
      
      
        vértice_type_float4
        Quatro valores de ponto flutuante
      
      
        vértice_tipo_color
        Quatro valores componentes (r, g, b, a)
      
      
        vértice_type_ubyte4
        Quatro valores de bytes não assinados (de 0 a 255)
      
    
  
   O uso que estas constantes serão colocadas também precisa ser definido para que os valores possam ser "vinculados" adequadamente dentro do sombreador que está sendo criado. Isto é necessário devido ao fato de que DX e OpenGL têm requisitos diferentes, portanto, se
    Se não os amarrarmos corretamente, eles não passarão bem na sombra. As constantes de uso disponíveis que você pode escolher estão listadas abaixo e aquelas que você usa dependerão das especificidades do shader que está sendo criado:
   
  
    
      
        Constante
        Descrição
      
      
        vértice_utilização_posição
        valores de posição (x, y, z)
      
      
        vértice_usage_colour
        valores de cor (r, g, b, a)
      
      
        vértice_utilização_normal
        valores normais do vértice (nx, ny, nz)
      
      
        vertex_usage_textcoord
        Coordenadas UV (u, v)
      
      
        vértice_usage_blendweight
        o peso de mistura da matriz de entrada (para animação do esqueleto, por exemplo)
      
      
        vertex_usage_blendindices
        os índices das matrizes a utilizar (para animação esquelética, por exemplo)
      
      
        vertex_usage_depth
        valor do tampão de profundidade do vértice
      
      
        vértice_utilização_tangente
        valores tangentes
      
      
        vértice_utilização_binormal
        valores binormais
      
      
        vertex_usage_fog
        valores de nevoeiro
      
      
        vértice_utilização_amostra
        índice de amostragem
      
    
  
   Há algumas coisas importantes a serem observadas ao utilizar formatos personalizados como estes:
  
    A função vtex_format_add_custom() suporta apenas a posição de vértice_usage_position, vertex_usage_colour, vertex_usage_normal e vertex_usage_textcoord ao usar shaders GLSL. Estes mapearão para os atributos de sombreador 
     in_Position, in_Colour[0 - ...], in_Normal respectivamente (qualquer coisa que não seja um destes três atributos - por exemplo: coordenadas de textura - pode ser mapeada para qualquer atributo que você definir).
    Em geral, você deve usar vertex_usage_textcoord para todos os parâmetros extras sempre que possível, pois tipos como vertex_usage_blendweight e vertex_usage_tangent estão perto de ser depreciados na maioria das línguas shader, e provavelmente não
      converter corretamente. Em vez disso, use os tipos vec, vec2, vec3 ou vec4 vertex_usage_textcoord e tudo deve funcionar bem.
    GLSL ES não suporta atributos inteiros, portanto, a passagem em ivec4's não funciona (este tipo é normalmente usado quando se passa em vértices_usage_blendindices ). O que você precisa fazer é passar em coordenadas de textura e, em seguida, no
     shader, convertê-los para ivec4 desta forma:
  
   
  atributo vec3 in_Position; atributo vec4 in_BlendIndices; atributo vec4 in_BlendWeights;
     variável vec4 v_vColour; variável mat4 v_mat;
     void main() {
     gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0); v_vColour = in_BlendWeights; ivec4 t = ivec4(in_BlendIndices); v_mat = gm_Matrices[ t.x ]; }
  
  
    Os pesos da mistura são geralmente armazenados em um array e depois acessados usando índices de mistura, mas você pode ver aqui que ao invés de definir in_BlendIndices como um atributo ivec4, ele é um vec4 , então lançado para um ivec4 em 
      o código. Isto é então usado para indexar o array criado usando o gm_Matrix (você só pode acessar um array usando um valor INT - não um float).
    
  
  Sintaxe:
  vertex_format_add_custom(tipo, uso);
  
    
      
        Argumento
        Descrição
      
      
        tipo
        O tipo de dados que estes dados de vértices personalizados terão (ver o constantes de tipo listados abaixo).
      
      
        uso
        O uso que os dados terão (ver o constantes de uso listados abaixo).
      
    
  
   
  Devoluções:
  N/A
   
  Exemplo:
  vertex_format_begin(); vertex_format_add_textcoord();
     vertex_format_add_custom(vertex_type_float3, vertex_usage_position); my_format = vertex_format_end();
  O código acima criará um novo formato de vértice com textura justa e 3 valores de ponto flutuante personalizados para a posição. É então armazenado o id do formato na variável "my_format".
   
   
   
  
    
      
        Voltar: Primitivos e formatos de vértices
        Próximo: vértice_format_end_end
      
    
    © Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

