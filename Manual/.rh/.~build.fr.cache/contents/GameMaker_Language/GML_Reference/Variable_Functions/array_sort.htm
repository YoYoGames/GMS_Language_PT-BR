
  
  array_sort
  Com esta função você pode ordenar uma matriz em ordem ascendente ou descendente ou usando uma função personalizada para definir a ordem de ordenação. A função exige que você forneça a matriz para ordenar e, em seguida, uma das seguintes opções:
  
    As constantes true ou false para indicar ascendente (true) ou descendente (false) ordenam
    
    Uma função personalizada para definir a ordem de classificação
  
  Se você usar uma função personalizada para a ordenação, ela deve levar 2 argumentos que receberão os valores do elemento atual e do elemento seguinte, respectivamente. A função deve retornar qualquer um dos seguintes valores para afetar a ordem de ordenação (onde elm1 é
    o elemento atual e elm2 é o próximo elemento):
  
    0: se elm1 e elm2 forem iguais
    <0 ( número negativo): se elm1 for antes de elm2
    >0 ( número positivo): se elm1 for atrás de elm2
  
  Se a matriz contiver um conjunto de cordas, então as cordas serão ordenadas alfabeticamente com base no alfabeto inglês ao usar o tipo padrão de ordenação ascendente/descendente. Todos os outros tipos de dados serão ordenados com base em seu valor numérico, o exato
    cujos valores dependerão do próprio tipo de dados (por exemplo, um conjunto de buffers seria classificado com base no valor numérico de seus endereços de memória).
  Note que esta função modificará o conteúdo da matriz original que foi fornecida. Para criar uma cópia ordenada, use array_copy() para duplicar a matriz primeiro, e depois passar isso para esta função.
   
  Sintaxe:
  array_sort(variável, sorttype_ou_function);
  
    
      
        Argumento
        Descrição
      
      
        variável
        A variável que sustenta a matriz.
      
      
        tipo_ou_função_de_ordenação 
        
        O tipo de ordenação (true para ascendente ou false para descendente) ou uma referência de função a ser usada para ordenação.
        
      
    
  
   
  Devoluções:
  N/A
   
  Exemplo:
  var _a = [10, 9, 8, 7, 6, 5];
     array_sort(_a, function(elm1, elm2) { return elm1 - elm2; });
  O código acima usa uma função de classificação personalizada para classificar a matriz em uma ordem ascendente. A função de ordenação toma os dois elementos da matriz como elm1 e elm2 e realiza uma subtração sobre eles. Se elm1 for maior que elm2,
    a subtração resulta em um número positivo que empurra o olmo1 para depois do olmo2, colocando-os em uma ordem ascendente.
  Aqui está um exemplo estendido:
  var _xx, _yy, _a; for (var i = 0; i < 10; i++) { _xx = irandom(room_width); _yyy = irandom(room_height); _a[i] = instance_create_layer(_xx, _yyy, layer, obj_Bullet); } 
     show_debug_message(_a);
    
     var _f = function(inst1, inst2) { return inst1.x - inst2.x; } 
     array_sort(_a, _f); show_debug_message(_a);
  
  O código acima criará um conjunto de 10 instâncias colocadas em posições aleatórias dentro da sala. A mensagem de debug mostrará algo como o seguinte:
  [ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]
  O código então cria um método a ser usado na função array_sort() que retorna a diferença entre cada uma das X posições das instâncias na sala. Em seguida, a função array_sort() é
    rodar utilizando esse método, classificando as instâncias por X do mais baixo para o mais alto. A saída para a matriz seria então algo parecido com isto:
  [ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]
   
   
   
  
    
      
        Voltar: Funções variáveis
        Próximo: array_length
      
    
    © Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

