
  
  Câmeras e Viewports
  Ao criar salas no GameMaker Studio 2, você precisa configurar diferentes portas de visualização e/ou câmeras para controlar o que é exibido para o jogador. As portas de visualização são, basicamente, pequenas janelas para o seu mundo de jogo que permitem que você mostre
    as partes do jogador de uma sala, seja em escala ou 1:1, e como tal são essenciais quando sua sala de jogo é maior do que o tamanho da tela. As câmeras são o que define exatamente o que será mostrado em cada porta de visualização.
  OGameMaker Studio 2 permite 8 portas de visualização independentes (numeradas de 0 a 7) e um número ilimitado de câmeras, das quais apenas 8 podem estar ativas a qualquer momento - uma atribuída a cada uma das portas disponíveis - embora normalmente você só
    precisam de um ou dois portos de visão. As câmeras podem mostrar diferentes partes de uma mesma sala e podem ser ativadas e desativadas, bem como designadas para visualizar portas a qualquer momento, o que significa que você pode usar câmeras para desenhar elementos HUD ou para ter efeitos de tela dividida,
    ou para criar cut-scenes, por exemplo. Essencialmente, você posiciona uma câmera dentro de uma sala e define a "vista" (área) da sala que será visível a ela, e então esta vista é atraída para uma porta de vista - note que a porta de vista pode ser
    um tamanho diferente da visão da câmera e como tal você pode distorcer e escalar a visão da câmera se for um tamanho diferente de 1:1 com a porta de visão.
  IMPORTANTE! É fácil ficar confuso quando se fala de câmeras, vistas e portos, portanto, para esclarecer:
  
    A Câmera: Um ponto dentro da sala que será usado para definir como a sala é exibida - normalmente com posição, orientação, campo de visão e relação de aspecto
    A Vista: O que a câmera vê, com base na posição, projeção e rotação da câmera
    A Porta de Vista: A área da tela onde a visão da câmera será exibida.
  
  Se você estiver adicionando câmeras através do Room Editor, então você pode recuperar o valor de identificação da câmera deles usando a variável view_camera. Você pode então manipular a visualização usando as funções abaixo e pode até mesmo destruir as câmeras padrão se necessário, embora você precisará atribuir uma nova câmera à visualização, caso contrário você obterá algumas
    comportamento muito imprevisível. As câmeras adicionadas a uma porta de visualização no editor da sala são de alcance global, o que significa que elas são criadas uma vez quando você inicia o jogo, e depois quando você entra em cada sala elas são ajustadas para os valores definidos no editor da sala,
    Portanto, se você destruir uma câmera padrão em qualquer sala, ela deixará de existir para todas as salas.
  Algo a ser observado sobre câmeras e portas de visualização é que a área total da caixa de delimitação para todas as portas de visualização ativa na primeira sala do jogo é o que define o tamanho da tela de fundo (ou tamanho da janela para MacOS, Ubuntu(Linux) e
   Windows), e quaisquer áreas que não sejam cobertas por uma porta de visualização serão, por padrão, desenhadas usando a cor da janela, conforme ilustrado pela imagem abaixo:
  
  NOTA: Por padrão você precisa selecionar "Clear Display Buffer" no editor da sala para que a cor seja mostrada, e você só pode definir a cor usando a função window_set_colour (). Se você não usar esta função, por padrão
    para o preto.
  Você deve tomar cuidado ao usar várias câmeras, pois o evento de sorteio para todas as instâncias é chamado uma vez para cada vista visível, portanto, se você tiver três vistas de câmera ativas em uma sala, o evento de sorteio será executado três vezes a cada etapa (basicamente fazendo três
    vezes o trabalho) que pode ser uma causa de desaceleração se o jogo for grande ou complexo. A variável view_current pode ser usada para ajudar a limitar estas chamadas de sorteio, porém, verificando qual visão está sendo desenhada e apenas os itens de desenho que são específicos
    a um determinado porto de vista. Tenha cuidado também ao criar suas próprias câmeras, como se você criasse uma em uma sala e não a removesse usando o camera_destroy() você pode obter um vazamento de memória.
  Você pode encontrar uma visão geral de todas as funções disponíveis nas diferentes seções abaixo, mas vale a pena notar que algumas dessas funções requerem a criação e o uso de diferentes matrizes, por isso você pode querer olhar a seção do manual
    para as funções da Matriz. Observe também que há algumas funções de sala que podem ser usadas para obter e configurar câmeras e visualizar valores de portas em salas diferentes da atual (veja a seção sobre Salas).
  
  As seguintes funções podem ser usadas para criar e destruir câmeras:
   
  
    camera_create
    camera_create_view
    camera_destroy
    camera_apply
  
   
  Há também uma série de funções para configurar e obter informações da câmera:
   
  
    camera_set_view_mat
    camera_set_proj_mat
    camera_set_update_script
    camera_set_begin_script
    camera_set_end_script
    camera_set_view_pos
    câmera_set_view_size_size
    câmera_set_view_view_speed
    camera_set_view_border
    câmera_set_view_angle
    camera_set_view_target
    camera_set_default
    camera_get_view_mat
    camera_get_proj_mat
    camera_get_update_script
    camera_get_begin_script
    camera_get_end_script
    camera_get_view_x
    camera_get_view_y
    camera_get_view_width
    camera_get_view_height
    camera_get_view_speed_x
    camera_get_view_speed_speed_y
    camera_get_view_border_x
    camera_get_view_border_y
    camera_get_view_angle
    camera_get_view_target
    camera_get_default
    camera_get_active
  
   
  Quando se trabalha com câmeras, é preciso atribuí-las a uma porta de visualização para que elas estejam "ativas" e exibam qualquer coisa. Estas portas de visualização são numeradas de 0 a 7 e podem ser alteradas e posicionadas usando diferentes matrizes variáveis e
    e você também pode verificar qual delas está desenhando no momento ou qual câmera está atualmente presa a ela.
  Estão disponíveis as seguintes variáveis de escopo global incorporadas:
   
  
    view_camera
    view_current
    view_enabled
    view_visible
    view_xport
    view_yport
    view_wport
    view_hport
    view_surface_id
  
   
  Existem também as seguintes funções para lidar com portos de vista:
   
  
    view_get_camera
    view_get_visible
    view_get_xport
    view_get_yport
    view_get_wport
    view_get_hport
    view_get_surface_id
    view_set_camera
    view_set_visible
    view_set_xport
    view_set_yport
    view_set_wport
    view_set_hport
    view_set_surface_id
  
   
   
   
  
    
      
        Voltar: Câmeras e Display
        A seguir: A Janela de Jogo
      
    
    © Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

