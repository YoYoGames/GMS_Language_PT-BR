
  
  physics_joint_revolute_create
  Uma junta revoluta força dois corpos a compartilhar um ponto de ancoragem comum (muitas vezes chamado de ponto de dobradiça) e a junta tem um único grau de liberdade - a rotação relativa dos dois corpos em torno deste ponto. Para especificar uma revoluta, é necessário fornecer duas instâncias
    e um único ponto de ancoragem na sala, como você pode ver na imagem fornecida:
  Se você olhar para a imagem, você pode ver que as duas instâncias foram criadas
    para sobrepor e, no ponto em que se tocam, definimos uma junta revoluta. Agora, esta junta pode ser limitada em sua liberdade de rotação graças aos valores "ang_min_limit" e "ang_max_limit". Como isto funciona? Bem,
    vamos olhar para outra imagem:
  Como você pode ver, os ângulos no mundo da física não são os mesmos que o padrão
   GameMaker Studio 2 ângulos onde a direita é 0 graus e depois vai no sentido anti-horário, de modo que acima é 90, esquerda é 180, e abaixo é 270. Não, ao lidar com a junta giratória, o eixo de 0 graus vai da posição da junta até a origem do
    segunda instância definida pela função e os ângulos são então calculados no sentido horário. Se você ligar o limite do ângulo, os limites são definidos como sendo relativos a este eixo de 0 graus e a faixa limite deve incluir zero, caso contrário
    a junta se soltará quando a sala começar. Finalmente, você pode definir a junta como tendo ou não um motor. Isto significa que quando não for influenciada por uma colisão, a junta se moverá em uma direção, que é definida pela velocidade do motor com um número positivo
    sendo no sentido horário e um número negativo sendo no sentido anti-horário. O argumento "max_motor_torque" é para limitar a velocidade da rotação de modo que você não tenha um motor perpetuamente acelerador e para limitar a influência de uma colisão
    pode ter na rotação. Desta forma, você pode usar um motor de junta para simular o atrito da junta, ajustando a velocidade da junta a zero e o torque máximo a algum valor pequeno, mas significativo. O motor tentará evitar que a junta gire, mas produzirá
    a uma carga significativa.
  Como em todas as juntas, se você definir o valor "col" como verdadeiro, então as duas instâncias podem interagir e colidir uma com a outra, mas somente se elas tiverem eventos de colisão, porém, se for definido como falso, elas não irão colidir
    não importa o que aconteça.
   
  Sintaxe:
  physics_joint_revolute_create(inst1, inst2, w_anchor_x, w_anchor_y, ang_min_limt, ang_max_limit, ang_max_limit, ang_limit, max_motor_torque, motor_velocidade, motor, col)
  
    
      
        Argumento
        Descrição
      
      
        inst1
        A primeira instância para se conectar com a junta
      
      
        inst2
        A segunda instância para se conectar com a junta
      
      
        w_anchor_x
        A coordenada x para a articulação, dentro do mundo do jogo
      
      
        w_anchor_y
        A coordenada y para a articulação, dentro do mundo do jogo
      
      
        ang_min_limit
        O limite inferior permitido para o ângulo de junção
      
      
        ang_max_limit
        O limite superior permitido para o ângulo de junção
      
      
        ang_limit
        Se o ângulo da junta deve ser limitado (verdadeiro) ou não (falso)
      
      
        max_motor_torque
        Define o torque máximo do motor utilizado para atingir a velocidade desejada do motor (em Newtons por metro)
      
      
        velocidade_do_motor
        Esta é a velocidade na qual o motor deve girar
      
      
        motor
        Se o motor deve estar ativo (verdadeiro) ou não (falso)
      
      
        col
        Se as duas instâncias podem colidir (verdadeiras) ou não (falsas)
      
    
  
   
  Devoluções:
  Inteiro (índice da junta)
   
  Exemplo:
  var mainFixture, o_id; mainFixture = physics_fixture_create(); physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2); o_id=instance_create_layer(x+25, y, "Instances", obj_Door); physics_fixture_bind(mainFixture_bind(mainFixture),
    id); physics_fixture_bind(mainFixture, o_id); physics_joint_revolute_create(id, o_id, x+25, y, -90, 90, 1, 0, 0, 0, 0, 0, 0); physics_fixture_delete(mainFixture);
  
  O código acima cria e define uma nova fixação e depois cria uma instância de "obj_Door", ligando a fixação criada aos dois novos objetos. Eles são então unidos por uma junta giratória sem motor e os ângulos limitados a +/- 90 graus
    balanço. Finalmente, a fixação é apagada, pois não é mais necessária.
   
   
   
  
    
      
        Voltar: Juntas
        A seguir: physics_joint_prismatic_create
      
    
    © Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

