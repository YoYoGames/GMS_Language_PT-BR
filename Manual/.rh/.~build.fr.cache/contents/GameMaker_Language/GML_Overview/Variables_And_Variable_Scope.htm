
  
  Vari√°veis e Escopo Vari√°vel
  Como qualquer linguagem de programa√ß√£o GML utiliza vari√°veis como a unidade b√°sica para a maioria das opera√ß√µes de programa√ß√£o. As vari√°veis s√£o usadas para armazenar informa√ß√µes na mem√≥ria dos dispositivos para uso posterior (ou instant√¢neo), e recebem um nome para que voc√™ possa consultar
    a eles em tempo de execu√ß√£o e fun√ß√µes de roteiro. Uma vari√°vel em GML pode armazenar muitos diferentes tipos de dadoscomo um n√∫mero real (ex.: 100, 2.456575, -56 etc...), um fio (ex.: "Ol√° mundo!"), um n√∫mero inteiro
    (ex.: 1, 556, -7), ou um booleano(verdadeiro ou falso), assim como outras coisas:
  var _num = 126,4545; var _str = "Ol√° Mundo"; new_num = _num * 100; global.my_string = _str + " Eu disse";
  Voc√™ tamb√©m pode usar vari√°veis para manter os valores retornados de fun√ß√µes, por exemplo:
  var _id = instance_nearest(x, y, obj_Tree); root = sqrt(1000); global.str = string_upper("Hello World");
  Portanto, uma vari√°vel √© algo que podemos nomear e usar para armazenar um valor para uso posterior em uma ou mais opera√ß√µes. Um grande exemplo de "mundo real" de uma vari√°vel √© pi ùúã ... √©  uma vari√°vel que todos conhecem e que det√©m o valor 3,14159265(etc...).
    Por que a temos em nosso idioma? Bem, √© muito mais f√°cil dizer a algu√©m "pi" do que "tr√™s ponto um quatro um cinco cinco nove dois seis cinco"! Nomear coisas como esta torna a vida muito mais simples e tamb√©m significa que se o valor
    dessa vari√°vel, n√£o temos que mudar o n√∫mero em todos os lugares, pois o nome da vari√°vel ainda √© o mesmo.
  Ao formar vari√°veis em GML deve ter um nome que comece com uma letra ou o s√≠mbolo de sublinhado "_" e pode conter apenas letras, n√∫meros e o s√≠mbolo de sublinhado "_" com um comprimento m√°ximo de 64 s√≠mbolos. Portanto, vari√°veis v√°lidas
    s√£o coisas como peixe, foo_bar, num1, ou _str, enquanto vari√°veis inv√°lidas seriam 6 peixes, foo bar, ou *num.
  Agora, em muitas linguagens de programa√ß√£o, voc√™ precisa criar uma "atribui√ß√£o" vari√°vel antes de poder us√°-la. Isto significa basicamente que voc√™ diz ao computador o nome que deseja usar para a vari√°vel e lhe atribui um valor inicial. A vari√°vel √©
    e em seguida, dar um lugar na mem√≥ria para armazenar o valor ou realizar opera√ß√µes sobre ele. A atribui√ß√£o de uma vari√°vel tem a forma de:
  <vari√°vel> = <express√£o>;
  Uma express√£o pode ser um valor simples mas tamb√©m pode ser mais complicada, portanto, em vez de atribuir um valor a uma vari√°vel, pode-se tamb√©m acrescentar um valor ao valor atual da vari√°vel usando +=, por exemplo:
  a = 100; // Atribuindo um valor simples b = 200; c = 300; a += b; // Atribuindo com opera√ß√£o a = b + c; // Atribuindo com express√£o
  NOTA: A linguagem GameMaker tamb√©m aceitar√° ":=" para tarefas, embora esta n√£o seja a maneira mais comum de faz√™-lo:
  <vari√°vel> := <express√£o>;
  Da mesma forma, voc√™ pode subtrair usando -=, multiplicar usando *=, dividir usando /=, ou usar operadores bitwise usando |=,
    &= , ou ^=. Voc√™ tamb√©m pode adicionar ou subtrair um de um valor usando ++, --. Para maiores informa√ß√µes, veja
    a se√ß√£o sobre Express√µes e Operadores.
  Observe que voc√™ n√£o pode fazer o seguinte (ou qualquer varia√ß√£o):
  a = b = c = 4;
  E ao inv√©s disso, deve ser feito como:
  a = 4; b = 4; c = 4;
  As atribui√ß√µes de vari√°veis mostradas acima s√£o todas vari√°veis de inst√¢ncia , por√©m existem na verdade tr√™s outras categorias de vari√°veis principais quando voc√™ programa com o GameMaker Studio 2 e cada uma tem seu pr√≥prio escopo (que pode ser considerado
    como sua √°rea de opera√ß√£o, ou alcance). Os diferentes tipos de vari√°veis e seu escopo est√£o todos delineados nas p√°ginas seguintes:
  
    Vari√°veis locais
    Vari√°veis de inst√¢ncia
    Vari√°veis globais
    Constantes
  
  A linguagem GameMaker tamb√©m tem m√∫ltiplas vari√°veis embutidas que podem ter qualquer um dos escopos acima mencionados (exceto local). Estas vari√°veis s√£o especiais, pois s√£o inclu√≠das por padr√£o como parte dos objetos e das salas do jogo.
    mundo. Algumas vari√°veis globais incorporadas est√£o listadas na se√ß√£o mencionada acima, e as diferentes partes do manual para sprites, salas, objetos, etc... tamb√©m descrevem as vari√°veis incorporadas dispon√≠veis em cada caso. Exemplos de tais inst√¢ncias incorporadas
    vari√°veis seriam:
  sprite_index
    escala_do_caminho
    velocidade
  E exemplos de vari√°veis globais incorporadas seriam:
  view_xport
    GM_vers√£o
    sala
  A maioria das vari√°veis embutidas pode ser alterada e definida como outras vari√°veis, e algumas podem at√© ser arrays, s√≥ que voc√™ n√£o precisa defini-las para cri√°-las como se fosse uma vari√°vel regular, j√° que elas j√° ser√£o inicializadas para uma
    valor padr√£o.
  Finalmente, h√° uma s√©rie de fun√ß√µes que s√£o dedicadas √† configura√ß√£o, obten√ß√£o ou verifica√ß√£o de vari√°veis de alguma forma, dispon√≠veis na p√°gina seguinte:
  
    Fun√ß√µes vari√°veis
  
   
   
   
  
    
      
        Voltar: Vis√£o geral daGML
        A seguir: Arrays
      
    
    ¬© Copyright YoYo Games Ltd. 2021 Todos os direitos reservados
  
  
  

